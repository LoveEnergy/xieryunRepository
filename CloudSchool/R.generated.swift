//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `CourseVideoListViewController`, and contains static references to 1 segues.
    struct courseVideoListViewController {
      /// Segue identifier `videoDetail`.
      static let videoDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CourseVideoListViewController, CourseVideoDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "videoDetail")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `videoDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func videoDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CourseVideoListViewController, CourseVideoDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.courseVideoListViewController.videoDetail, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 12 storyboards.
  struct storyboard {
    /// Storyboard `Cart`.
    static let cart = _R.storyboard.cart()
    /// Storyboard `Classify`.
    static let classify = _R.storyboard.classify()
    /// Storyboard `Exam`.
    static let exam = _R.storyboard.exam()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `My`.
    static let my = _R.storyboard.my()
    /// Storyboard `News`.
    static let news = _R.storyboard.news()
    /// Storyboard `Recharge`.
    static let recharge = _R.storyboard.recharge()
    /// Storyboard `Study`.
    static let study = _R.storyboard.study()
    /// Storyboard `VideoPlayer`.
    static let videoPlayer = _R.storyboard.videoPlayer()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Cart", bundle: ...)`
    static func cart(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.cart)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Classify", bundle: ...)`
    static func classify(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.classify)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Exam", bundle: ...)`
    static func exam(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.exam)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "My", bundle: ...)`
    static func my(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.my)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "News", bundle: ...)`
    static func news(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.news)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Recharge", bundle: ...)`
    static func recharge(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.recharge)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Study", bundle: ...)`
    static func study(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.study)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "VideoPlayer", bundle: ...)`
    static func videoPlayer(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.videoPlayer)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 2 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    struct comAppleDeveloperAssociatedDomains {
      static let applinksWwwCeiNetCn = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:www.cei.net.cn") ?? "applinks:www.cei.net.cn"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `AlipaySDK.bundle`.
    static let alipaySDKBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "AlipaySDK", pathExtension: "bundle")
    /// Resource file `EaseUIResource.bundle`.
    static let easeUIResourceBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "EaseUIResource", pathExtension: "bundle")
    /// Resource file `lauch_bg.jpeg`.
    static let lauch_bgJpeg = Rswift.FileResource(bundle: R.hostingBundle, name: "lauch_bg", pathExtension: "jpeg")
    /// Resource file `location.txt`.
    static let locationTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "location", pathExtension: "txt")

    /// `bundle.url(forResource: "AlipaySDK", withExtension: "bundle")`
    static func alipaySDKBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alipaySDKBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "EaseUIResource", withExtension: "bundle")`
    static func easeUIResourceBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.easeUIResourceBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "lauch_bg", withExtension: "jpeg")`
    static func lauch_bgJpeg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lauch_bgJpeg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "location", withExtension: "txt")`
    static func locationTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.locationTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 227 images.
  struct image {
    /// Image `AlivcVideoPalySelect`.
    static let alivcVideoPalySelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "AlivcVideoPalySelect")
    /// Image `GuideImage8-1`.
    static let guideImage81 = Rswift.ImageResource(bundle: R.hostingBundle, name: "GuideImage8-1")
    /// Image `GuideImage8-2`.
    static let guideImage82 = Rswift.ImageResource(bundle: R.hostingBundle, name: "GuideImage8-2")
    /// Image `GuideImage8-3`.
    static let guideImage83 = Rswift.ImageResource(bundle: R.hostingBundle, name: "GuideImage8-3")
    /// Image `GuideImage8-4`.
    static let guideImage84 = Rswift.ImageResource(bundle: R.hostingBundle, name: "GuideImage8-4")
    /// Image `GuideImageX-1`.
    static let guideImageX1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "GuideImageX-1")
    /// Image `GuideImageX-2`.
    static let guideImageX2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "GuideImageX-2")
    /// Image `GuideImageX-3`.
    static let guideImageX3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "GuideImageX-3")
    /// Image `GuideImageX-4`.
    static let guideImageX4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "GuideImageX-4")
    /// Image `MemberPublicity`.
    static let memberPublicity = Rswift.ImageResource(bundle: R.hostingBundle, name: "MemberPublicity")
    /// Image `address_more`.
    static let address_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "address_more")
    /// Image `alivcPlayThumb`.
    static let alivcPlayThumb = Rswift.ImageResource(bundle: R.hostingBundle, name: "alivcPlayThumb")
    /// Image `alivc_lock`.
    static let alivc_lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "alivc_lock")
    /// Image `alivc_unlock`.
    static let alivc_unlock = Rswift.ImageResource(bundle: R.hostingBundle, name: "alivc_unlock")
    /// Image `arrowDown`.
    static let arrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowDown")
    /// Image `avcBarrage`.
    static let avcBarrage = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcBarrage")
    /// Image `avcBigSound`.
    static let avcBigSound = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcBigSound")
    /// Image `avcClose`.
    static let avcClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcClose")
    /// Image `avcDelete`.
    static let avcDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcDelete")
    /// Image `avcDownloadNormal`.
    static let avcDownloadNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcDownloadNormal")
    /// Image `avcDownloadPause`.
    static let avcDownloadPause = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcDownloadPause")
    /// Image `avcDownload`.
    static let avcDownload = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcDownload")
    /// Image `avcLock`.
    static let avcLock = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcLock")
    /// Image `avcMore`.
    static let avcMore = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcMore")
    /// Image `avcNoVideo`.
    static let avcNoVideo = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcNoVideo")
    /// Image `avcPromptSuccess`.
    static let avcPromptSuccess = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcPromptSuccess")
    /// Image `avcPromptWarningBig`.
    static let avcPromptWarningBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcPromptWarningBig")
    /// Image `avcPromptWarning`.
    static let avcPromptWarning = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcPromptWarning")
    /// Image `avcScan`.
    static let avcScan = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcScan")
    /// Image `avcSelected`.
    static let avcSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcSelected")
    /// Image `avcShooting`.
    static let avcShooting = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcShooting")
    /// Image `avcSmallSound`.
    static let avcSmallSound = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcSmallSound")
    /// Image `avcTV`.
    static let avcTV = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcTV")
    /// Image `avcUnlock`.
    static let avcUnlock = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcUnlock")
    /// Image `avcWait`.
    static let avcWait = Rswift.ImageResource(bundle: R.hostingBundle, name: "avcWait")
    /// Image `bigBrightness`.
    static let bigBrightness = Rswift.ImageResource(bundle: R.hostingBundle, name: "bigBrightness")
    /// Image `bind_QQ`.
    static let bind_QQ = Rswift.ImageResource(bundle: R.hostingBundle, name: "bind_QQ")
    /// Image `bind_phone`.
    static let bind_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "bind_phone")
    /// Image `bind_weixin`.
    static let bind_weixin = Rswift.ImageResource(bundle: R.hostingBundle, name: "bind_weixin")
    /// Image `blue_share`.
    static let blue_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "blue_share")
    /// Image `blue_system`.
    static let blue_system = Rswift.ImageResource(bundle: R.hostingBundle, name: "blue_system")
    /// Image `blue_teacher`.
    static let blue_teacher = Rswift.ImageResource(bundle: R.hostingBundle, name: "blue_teacher")
    /// Image `boss`.
    static let boss = Rswift.ImageResource(bundle: R.hostingBundle, name: "boss")
    /// Image `button_close`.
    static let button_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "button_close")
    /// Image `call_server`.
    static let call_server = Rswift.ImageResource(bundle: R.hostingBundle, name: "call_server")
    /// Image `cart_choose_n`.
    static let cart_choose_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart_choose_n")
    /// Image `cart_choose_s`.
    static let cart_choose_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart_choose_s")
    /// Image `cart_minus`.
    static let cart_minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart_minus")
    /// Image `cart_plus`.
    static let cart_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart_plus")
    /// Image `cart_selected`.
    static let cart_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart_selected")
    /// Image `cell_arrow_right`.
    static let cell_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "cell_arrow_right")
    /// Image `circle_close`.
    static let circle_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle_close")
    /// Image `classify_bg`.
    static let classify_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "classify_bg")
    /// Image `classify_more_arrow`.
    static let classify_more_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "classify_more_arrow")
    /// Image `clear_back`.
    static let clear_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "clear_back")
    /// Image `common_close`.
    static let common_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "common_close")
    /// Image `common_empty_image`.
    static let common_empty_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "common_empty_image")
    /// Image `coupon_next`.
    static let coupon_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "coupon_next")
    /// Image `coupon_small_bg`.
    static let coupon_small_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "coupon_small_bg")
    /// Image `coupon_usual_expired_bg`.
    static let coupon_usual_expired_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "coupon_usual_expired_bg")
    /// Image `coupon_usual_go_use_bg`.
    static let coupon_usual_go_use_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "coupon_usual_go_use_bg")
    /// Image `coupon_usual_unused_bg`.
    static let coupon_usual_unused_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "coupon_usual_unused_bg")
    /// Image `coupon_usual_used_bg`.
    static let coupon_usual_used_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "coupon_usual_used_bg")
    /// Image `coupon_vip_expired_bg`.
    static let coupon_vip_expired_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "coupon_vip_expired_bg")
    /// Image `coupon_vip_unused_bg`.
    static let coupon_vip_unused_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "coupon_vip_unused_bg")
    /// Image `coupon_vip_used_bg`.
    static let coupon_vip_used_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "coupon_vip_used_bg")
    /// Image `course_buyNumber`.
    static let course_buyNumber = Rswift.ImageResource(bundle: R.hostingBundle, name: "course_buyNumber")
    /// Image `course_like_n`.
    static let course_like_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "course_like_n")
    /// Image `course_like_s`.
    static let course_like_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "course_like_s")
    /// Image `deadline`.
    static let deadline = Rswift.ImageResource(bundle: R.hostingBundle, name: "deadline")
    /// Image `default_image`.
    static let default_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "default_image")
    /// Image `employBG`.
    static let employBG = Rswift.ImageResource(bundle: R.hostingBundle, name: "employBG")
    /// Image `employ_I_know`.
    static let employ_I_know = Rswift.ImageResource(bundle: R.hostingBundle, name: "employ_I_know")
    /// Image `employ_block_info`.
    static let employ_block_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "employ_block_info")
    /// Image `employ_circle`.
    static let employ_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "employ_circle")
    /// Image `employ_companyDetail`.
    static let employ_companyDetail = Rswift.ImageResource(bundle: R.hostingBundle, name: "employ_companyDetail")
    /// Image `employ_fill_in`.
    static let employ_fill_in = Rswift.ImageResource(bundle: R.hostingBundle, name: "employ_fill_in")
    /// Image `employ_filtrate`.
    static let employ_filtrate = Rswift.ImageResource(bundle: R.hostingBundle, name: "employ_filtrate")
    /// Image `employ_know`.
    static let employ_know = Rswift.ImageResource(bundle: R.hostingBundle, name: "employ_know")
    /// Image `employ_search_search`.
    static let employ_search_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "employ_search_search")
    /// Image `employ_search_trangle`.
    static let employ_search_trangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "employ_search_trangle")
    /// Image `employ_switch_id`.
    static let employ_switch_id = Rswift.ImageResource(bundle: R.hostingBundle, name: "employ_switch_id")
    /// Image `exam_record_oval`.
    static let exam_record_oval = Rswift.ImageResource(bundle: R.hostingBundle, name: "exam_record_oval")
    /// Image `exam_record_score_icon`.
    static let exam_record_score_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "exam_record_score_icon")
    /// Image `frequency_close`.
    static let frequency_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "frequency_close")
    /// Image `frequency_download`.
    static let frequency_download = Rswift.ImageResource(bundle: R.hostingBundle, name: "frequency_download")
    /// Image `frequency_last`.
    static let frequency_last = Rswift.ImageResource(bundle: R.hostingBundle, name: "frequency_last")
    /// Image `frequency_next`.
    static let frequency_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "frequency_next")
    /// Image `frequency_play`.
    static let frequency_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "frequency_play")
    /// Image `frequency_progress`.
    static let frequency_progress = Rswift.ImageResource(bundle: R.hostingBundle, name: "frequency_progress")
    /// Image `frequency_stop`.
    static let frequency_stop = Rswift.ImageResource(bundle: R.hostingBundle, name: "frequency_stop")
    /// Image `gengduo`.
    static let gengduo = Rswift.ImageResource(bundle: R.hostingBundle, name: "gengduo")
    /// Image `getGroup`.
    static let getGroup = Rswift.ImageResource(bundle: R.hostingBundle, name: "getGroup")
    /// Image `goodsdetail_jingpin_sign`.
    static let goodsdetail_jingpin_sign = Rswift.ImageResource(bundle: R.hostingBundle, name: "goodsdetail_jingpin_sign")
    /// Image `goodsdetail_like`.
    static let goodsdetail_like = Rswift.ImageResource(bundle: R.hostingBundle, name: "goodsdetail_like")
    /// Image `goodsdetail_live_invite_code_bg`.
    static let goodsdetail_live_invite_code_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "goodsdetail_live_invite_code_bg")
    /// Image `goodsdetail_new_buy`.
    static let goodsdetail_new_buy = Rswift.ImageResource(bundle: R.hostingBundle, name: "goodsdetail_new_buy")
    /// Image `goodsdetail_new_like`.
    static let goodsdetail_new_like = Rswift.ImageResource(bundle: R.hostingBundle, name: "goodsdetail_new_like")
    /// Image `goodsdetail_new_store`.
    static let goodsdetail_new_store = Rswift.ImageResource(bundle: R.hostingBundle, name: "goodsdetail_new_store")
    /// Image `goodsdetail_number`.
    static let goodsdetail_number = Rswift.ImageResource(bundle: R.hostingBundle, name: "goodsdetail_number")
    /// Image `goodsdetail_vip_bg`.
    static let goodsdetail_vip_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "goodsdetail_vip_bg")
    /// Image `goodsdetail_vip_button_bg`.
    static let goodsdetail_vip_button_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "goodsdetail_vip_button_bg")
    /// Image `goodsdetail_vip_next`.
    static let goodsdetail_vip_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "goodsdetail_vip_next")
    /// Image `goodsdetail_vip_sign`.
    static let goodsdetail_vip_sign = Rswift.ImageResource(bundle: R.hostingBundle, name: "goodsdetail_vip_sign")
    /// Image `goodsdetail_vip`.
    static let goodsdetail_vip = Rswift.ImageResource(bundle: R.hostingBundle, name: "goodsdetail_vip")
    /// Image `goodsdetail_x`.
    static let goodsdetail_x = Rswift.ImageResource(bundle: R.hostingBundle, name: "goodsdetail_x")
    /// Image `home_anli`.
    static let home_anli = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_anli")
    /// Image `home_hangye`.
    static let home_hangye = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_hangye")
    /// Image `home_huanjing`.
    static let home_huanjing = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_huanjing")
    /// Image `home_jiance`.
    static let home_jiance = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_jiance")
    /// Image `home_jiaoyi`.
    static let home_jiaoyi = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_jiaoyi")
    /// Image `home_jichu`.
    static let home_jichu = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_jichu")
    /// Image `home_lingdao`.
    static let home_lingdao = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_lingdao")
    /// Image `home_qihou`.
    static let home_qihou = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_qihou")
    /// Image `home_redian`.
    static let home_redian = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_redian")
    /// Image `home_search_gray`.
    static let home_search_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_search_gray")
    /// Image `home_search`.
    static let home_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_search")
    /// Image `home_vip_ad_bg`.
    static let home_vip_ad_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_vip_ad_bg")
    /// Image `home_xinfa`.
    static let home_xinfa = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_xinfa")
    /// Image `hx_compose_pic_add`.
    static let hx_compose_pic_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "hx_compose_pic_add")
    /// Image `ic_back_white`.
    static let ic_back_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back_white")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `lauch_bg.jpeg`.
    static let lauch_bgJpeg = Rswift.ImageResource(bundle: R.hostingBundle, name: "lauch_bg.jpeg")
    /// Image `launch_a`.
    static let launch_a = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_a")
    /// Image `launch`.
    static let launch = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch")
    /// Image `live_backBG`.
    static let live_backBG = Rswift.ImageResource(bundle: R.hostingBundle, name: "live_backBG")
    /// Image `live_back`.
    static let live_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "live_back")
    /// Image `live_cancel`.
    static let live_cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "live_cancel")
    /// Image `live_close`.
    static let live_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "live_close")
    /// Image `live_start`.
    static let live_start = Rswift.ImageResource(bundle: R.hostingBundle, name: "live_start")
    /// Image `live_switch`.
    static let live_switch = Rswift.ImageResource(bundle: R.hostingBundle, name: "live_switch")
    /// Image `location`.
    static let location = Rswift.ImageResource(bundle: R.hostingBundle, name: "location")
    /// Image `login_icon`.
    static let login_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_icon")
    /// Image `login_qq`.
    static let login_qq = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_qq")
    /// Image `login_sina`.
    static let login_sina = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_sina")
    /// Image `login_wechat`.
    static let login_wechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_wechat")
    /// Image `member_ublicity_bottom`.
    static let member_ublicity_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "member_ublicity_bottom")
    /// Image `more_arrow`.
    static let more_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "more_arrow")
    /// Image `my_account_bg`.
    static let my_account_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_account_bg")
    /// Image `my_account_button_bg`.
    static let my_account_button_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_account_button_bg")
    /// Image `my_account_button_unselect_bg`.
    static let my_account_button_unselect_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_account_button_unselect_bg")
    /// Image `my_address`.
    static let my_address = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_address")
    /// Image `my_background`.
    static let my_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_background")
    /// Image `my_cache`.
    static let my_cache = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_cache")
    /// Image `my_call_server`.
    static let my_call_server = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_call_server")
    /// Image `my_card_bg`.
    static let my_card_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_card_bg")
    /// Image `my_cart`.
    static let my_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_cart")
    /// Image `my_coupon_d`.
    static let my_coupon_d = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_coupon_d")
    /// Image `my_coupon_e`.
    static let my_coupon_e = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_coupon_e")
    /// Image `my_coupon`.
    static let my_coupon = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_coupon")
    /// Image `my_course`.
    static let my_course = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_course")
    /// Image `my_exam`.
    static let my_exam = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_exam")
    /// Image `my_head`.
    static let my_head = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_head")
    /// Image `my_invoice`.
    static let my_invoice = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_invoice")
    /// Image `my_no_vip_zone_bg`.
    static let my_no_vip_zone_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_no_vip_zone_bg")
    /// Image `my_order`.
    static let my_order = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_order")
    /// Image `my_personal_sel`.
    static let my_personal_sel = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_personal_sel")
    /// Image `my_profit`.
    static let my_profit = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_profit")
    /// Image `my_setting`.
    static let my_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_setting")
    /// Image `my_study`.
    static let my_study = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_study")
    /// Image `my_vip_sign`.
    static let my_vip_sign = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_vip_sign")
    /// Image `my_vip_zone_bg`.
    static let my_vip_zone_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_vip_zone_bg")
    /// Image `new_cart`.
    static let new_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_cart")
    /// Image `news_share`.
    static let news_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "news_share")
    /// Image `news_watchNumber`.
    static let news_watchNumber = Rswift.ImageResource(bundle: R.hostingBundle, name: "news_watchNumber")
    /// Image `noSendResume`.
    static let noSendResume = Rswift.ImageResource(bundle: R.hostingBundle, name: "noSendResume")
    /// Image `order_line`.
    static let order_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "order_line")
    /// Image `order_minus`.
    static let order_minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "order_minus")
    /// Image `order_plus`.
    static let order_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "order_plus")
    /// Image `pay_success`.
    static let pay_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "pay_success")
    /// Image `player_download_btn`.
    static let player_download_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_download_btn")
    /// Image `player_full_btn`.
    static let player_full_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_full_btn")
    /// Image `player_pause_btn`.
    static let player_pause_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_pause_btn")
    /// Image `player_play_big`.
    static let player_play_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_play_big")
    /// Image `player_play_btn`.
    static let player_play_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_play_btn")
    /// Image `player_small_btn`.
    static let player_small_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_small_btn")
    /// Image `post_ receive`.
    static let post_Receive = Rswift.ImageResource(bundle: R.hostingBundle, name: "post_ receive")
    /// Image `post_ordered`.
    static let post_ordered = Rswift.ImageResource(bundle: R.hostingBundle, name: "post_ordered")
    /// Image `post_outStorage`.
    static let post_outStorage = Rswift.ImageResource(bundle: R.hostingBundle, name: "post_outStorage")
    /// Image `post_posting`.
    static let post_posting = Rswift.ImageResource(bundle: R.hostingBundle, name: "post_posting")
    /// Image `post_sendGoods`.
    static let post_sendGoods = Rswift.ImageResource(bundle: R.hostingBundle, name: "post_sendGoods")
    /// Image `privacy_topimage`.
    static let privacy_topimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "privacy_topimage")
    /// Image `privilege`.
    static let privilege = Rswift.ImageResource(bundle: R.hostingBundle, name: "privilege")
    /// Image `register_check_n`.
    static let register_check_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "register_check_n")
    /// Image `register_check_s`.
    static let register_check_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "register_check_s")
    /// Image `register_logo`.
    static let register_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "register_logo")
    /// Image `resumeSuccess`.
    static let resumeSuccess = Rswift.ImageResource(bundle: R.hostingBundle, name: "resumeSuccess")
    /// Image `right_arrow`.
    static let right_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "right_arrow")
    /// Image `searchBG`.
    static let searchBG = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchBG")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `sendMSG`.
    static let sendMSG = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendMSG")
    /// Image `sendResumeBtnBG`.
    static let sendResumeBtnBG = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendResumeBtnBG")
    /// Image `set_logo`.
    static let set_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "set_logo")
    /// Image `set_message`.
    static let set_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "set_message")
    /// Image `set_opinion`.
    static let set_opinion = Rswift.ImageResource(bundle: R.hostingBundle, name: "set_opinion")
    /// Image `set_service`.
    static let set_service = Rswift.ImageResource(bundle: R.hostingBundle, name: "set_service")
    /// Image `set_us`.
    static let set_us = Rswift.ImageResource(bundle: R.hostingBundle, name: "set_us")
    /// Image `share_copy`.
    static let share_copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_copy")
    /// Image `share_image`.
    static let share_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_image")
    /// Image `share_timeline`.
    static let share_timeline = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_timeline")
    /// Image `share_wallet`.
    static let share_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_wallet")
    /// Image `share_wechat`.
    static let share_wechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_wechat")
    /// Image `shopping_car`.
    static let shopping_car = Rswift.ImageResource(bundle: R.hostingBundle, name: "shopping_car")
    /// Image `signleSelect`.
    static let signleSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "signleSelect")
    /// Image `signleUnselect`.
    static let signleUnselect = Rswift.ImageResource(bundle: R.hostingBundle, name: "signleUnselect")
    /// Image `smallBrightness`.
    static let smallBrightness = Rswift.ImageResource(bundle: R.hostingBundle, name: "smallBrightness")
    /// Image `staff`.
    static let staff = Rswift.ImageResource(bundle: R.hostingBundle, name: "staff")
    /// Image `tabbar_classify_n`.
    static let tabbar_classify_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_classify_n")
    /// Image `tabbar_classify_s`.
    static let tabbar_classify_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_classify_s")
    /// Image `tabbar_home_n`.
    static let tabbar_home_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home_n")
    /// Image `tabbar_home_s`.
    static let tabbar_home_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home_s")
    /// Image `tabbar_my_n`.
    static let tabbar_my_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_my_n")
    /// Image `tabbar_my_s`.
    static let tabbar_my_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_my_s")
    /// Image `tabbar_news_n`.
    static let tabbar_news_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_news_n")
    /// Image `tabbar_news_s`.
    static let tabbar_news_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_news_s")
    /// Image `tabbar_purchase_n`.
    static let tabbar_purchase_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_purchase_n")
    /// Image `tabbar_purchase_s`.
    static let tabbar_purchase_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_purchase_s")
    /// Image `tabbar_study_n`.
    static let tabbar_study_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_study_n")
    /// Image `tabbar_study_s`.
    static let tabbar_study_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_study_s")
    /// Image `wallet_ali`.
    static let wallet_ali = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_ali")
    /// Image `wallet_choose_n`.
    static let wallet_choose_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_choose_n")
    /// Image `wallet_choose_s`.
    static let wallet_choose_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_choose_s")
    /// Image `wallet_money_b`.
    static let wallet_money_b = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_money_b")
    /// Image `wallet_money_s`.
    static let wallet_money_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_money_s")
    /// Image `wallet_wechat`.
    static let wallet_wechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_wechat")
    /// Image `xxleft`.
    static let xxleft = Rswift.ImageResource(bundle: R.hostingBundle, name: "xxleft")
    /// Image `xxright`.
    static let xxright = Rswift.ImageResource(bundle: R.hostingBundle, name: "xxright")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AlivcVideoPalySelect", bundle: ..., traitCollection: ...)`
    static func alivcVideoPalySelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alivcVideoPalySelect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GuideImage8-1", bundle: ..., traitCollection: ...)`
    static func guideImage81(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guideImage81, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GuideImage8-2", bundle: ..., traitCollection: ...)`
    static func guideImage82(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guideImage82, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GuideImage8-3", bundle: ..., traitCollection: ...)`
    static func guideImage83(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guideImage83, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GuideImage8-4", bundle: ..., traitCollection: ...)`
    static func guideImage84(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guideImage84, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GuideImageX-1", bundle: ..., traitCollection: ...)`
    static func guideImageX1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guideImageX1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GuideImageX-2", bundle: ..., traitCollection: ...)`
    static func guideImageX2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guideImageX2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GuideImageX-3", bundle: ..., traitCollection: ...)`
    static func guideImageX3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guideImageX3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GuideImageX-4", bundle: ..., traitCollection: ...)`
    static func guideImageX4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guideImageX4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MemberPublicity", bundle: ..., traitCollection: ...)`
    static func memberPublicity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memberPublicity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "address_more", bundle: ..., traitCollection: ...)`
    static func address_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.address_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alivcPlayThumb", bundle: ..., traitCollection: ...)`
    static func alivcPlayThumb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alivcPlayThumb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alivc_lock", bundle: ..., traitCollection: ...)`
    static func alivc_lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alivc_lock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alivc_unlock", bundle: ..., traitCollection: ...)`
    static func alivc_unlock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alivc_unlock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrowDown", bundle: ..., traitCollection: ...)`
    static func arrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcBarrage", bundle: ..., traitCollection: ...)`
    static func avcBarrage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcBarrage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcBigSound", bundle: ..., traitCollection: ...)`
    static func avcBigSound(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcBigSound, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcClose", bundle: ..., traitCollection: ...)`
    static func avcClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcClose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcDelete", bundle: ..., traitCollection: ...)`
    static func avcDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcDelete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcDownload", bundle: ..., traitCollection: ...)`
    static func avcDownload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcDownload, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcDownloadNormal", bundle: ..., traitCollection: ...)`
    static func avcDownloadNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcDownloadNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcDownloadPause", bundle: ..., traitCollection: ...)`
    static func avcDownloadPause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcDownloadPause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcLock", bundle: ..., traitCollection: ...)`
    static func avcLock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcLock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcMore", bundle: ..., traitCollection: ...)`
    static func avcMore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcMore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcNoVideo", bundle: ..., traitCollection: ...)`
    static func avcNoVideo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcNoVideo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcPromptSuccess", bundle: ..., traitCollection: ...)`
    static func avcPromptSuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcPromptSuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcPromptWarning", bundle: ..., traitCollection: ...)`
    static func avcPromptWarning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcPromptWarning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcPromptWarningBig", bundle: ..., traitCollection: ...)`
    static func avcPromptWarningBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcPromptWarningBig, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcScan", bundle: ..., traitCollection: ...)`
    static func avcScan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcScan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcSelected", bundle: ..., traitCollection: ...)`
    static func avcSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcShooting", bundle: ..., traitCollection: ...)`
    static func avcShooting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcShooting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcSmallSound", bundle: ..., traitCollection: ...)`
    static func avcSmallSound(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcSmallSound, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcTV", bundle: ..., traitCollection: ...)`
    static func avcTV(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcTV, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcUnlock", bundle: ..., traitCollection: ...)`
    static func avcUnlock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcUnlock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avcWait", bundle: ..., traitCollection: ...)`
    static func avcWait(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avcWait, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bigBrightness", bundle: ..., traitCollection: ...)`
    static func bigBrightness(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bigBrightness, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_QQ", bundle: ..., traitCollection: ...)`
    static func bind_QQ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_QQ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_phone", bundle: ..., traitCollection: ...)`
    static func bind_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_weixin", bundle: ..., traitCollection: ...)`
    static func bind_weixin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_weixin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blue_share", bundle: ..., traitCollection: ...)`
    static func blue_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blue_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blue_system", bundle: ..., traitCollection: ...)`
    static func blue_system(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blue_system, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blue_teacher", bundle: ..., traitCollection: ...)`
    static func blue_teacher(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blue_teacher, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "boss", bundle: ..., traitCollection: ...)`
    static func boss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boss, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "button_close", bundle: ..., traitCollection: ...)`
    static func button_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "call_server", bundle: ..., traitCollection: ...)`
    static func call_server(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.call_server, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart_choose_n", bundle: ..., traitCollection: ...)`
    static func cart_choose_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart_choose_n, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart_choose_s", bundle: ..., traitCollection: ...)`
    static func cart_choose_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart_choose_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart_minus", bundle: ..., traitCollection: ...)`
    static func cart_minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart_minus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart_plus", bundle: ..., traitCollection: ...)`
    static func cart_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart_plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart_selected", bundle: ..., traitCollection: ...)`
    static func cart_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cell_arrow_right", bundle: ..., traitCollection: ...)`
    static func cell_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cell_arrow_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circle_close", bundle: ..., traitCollection: ...)`
    static func circle_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "classify_bg", bundle: ..., traitCollection: ...)`
    static func classify_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.classify_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "classify_more_arrow", bundle: ..., traitCollection: ...)`
    static func classify_more_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.classify_more_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clear_back", bundle: ..., traitCollection: ...)`
    static func clear_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clear_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "common_close", bundle: ..., traitCollection: ...)`
    static func common_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.common_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "common_empty_image", bundle: ..., traitCollection: ...)`
    static func common_empty_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.common_empty_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coupon_next", bundle: ..., traitCollection: ...)`
    static func coupon_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coupon_next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coupon_small_bg", bundle: ..., traitCollection: ...)`
    static func coupon_small_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coupon_small_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coupon_usual_expired_bg", bundle: ..., traitCollection: ...)`
    static func coupon_usual_expired_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coupon_usual_expired_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coupon_usual_go_use_bg", bundle: ..., traitCollection: ...)`
    static func coupon_usual_go_use_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coupon_usual_go_use_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coupon_usual_unused_bg", bundle: ..., traitCollection: ...)`
    static func coupon_usual_unused_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coupon_usual_unused_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coupon_usual_used_bg", bundle: ..., traitCollection: ...)`
    static func coupon_usual_used_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coupon_usual_used_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coupon_vip_expired_bg", bundle: ..., traitCollection: ...)`
    static func coupon_vip_expired_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coupon_vip_expired_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coupon_vip_unused_bg", bundle: ..., traitCollection: ...)`
    static func coupon_vip_unused_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coupon_vip_unused_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coupon_vip_used_bg", bundle: ..., traitCollection: ...)`
    static func coupon_vip_used_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coupon_vip_used_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "course_buyNumber", bundle: ..., traitCollection: ...)`
    static func course_buyNumber(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.course_buyNumber, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "course_like_n", bundle: ..., traitCollection: ...)`
    static func course_like_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.course_like_n, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "course_like_s", bundle: ..., traitCollection: ...)`
    static func course_like_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.course_like_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deadline", bundle: ..., traitCollection: ...)`
    static func deadline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deadline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "default_image", bundle: ..., traitCollection: ...)`
    static func default_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "employBG", bundle: ..., traitCollection: ...)`
    static func employBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.employBG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "employ_I_know", bundle: ..., traitCollection: ...)`
    static func employ_I_know(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.employ_I_know, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "employ_block_info", bundle: ..., traitCollection: ...)`
    static func employ_block_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.employ_block_info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "employ_circle", bundle: ..., traitCollection: ...)`
    static func employ_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.employ_circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "employ_companyDetail", bundle: ..., traitCollection: ...)`
    static func employ_companyDetail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.employ_companyDetail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "employ_fill_in", bundle: ..., traitCollection: ...)`
    static func employ_fill_in(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.employ_fill_in, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "employ_filtrate", bundle: ..., traitCollection: ...)`
    static func employ_filtrate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.employ_filtrate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "employ_know", bundle: ..., traitCollection: ...)`
    static func employ_know(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.employ_know, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "employ_search_search", bundle: ..., traitCollection: ...)`
    static func employ_search_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.employ_search_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "employ_search_trangle", bundle: ..., traitCollection: ...)`
    static func employ_search_trangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.employ_search_trangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "employ_switch_id", bundle: ..., traitCollection: ...)`
    static func employ_switch_id(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.employ_switch_id, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "exam_record_oval", bundle: ..., traitCollection: ...)`
    static func exam_record_oval(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exam_record_oval, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "exam_record_score_icon", bundle: ..., traitCollection: ...)`
    static func exam_record_score_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exam_record_score_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "frequency_close", bundle: ..., traitCollection: ...)`
    static func frequency_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.frequency_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "frequency_download", bundle: ..., traitCollection: ...)`
    static func frequency_download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.frequency_download, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "frequency_last", bundle: ..., traitCollection: ...)`
    static func frequency_last(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.frequency_last, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "frequency_next", bundle: ..., traitCollection: ...)`
    static func frequency_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.frequency_next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "frequency_play", bundle: ..., traitCollection: ...)`
    static func frequency_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.frequency_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "frequency_progress", bundle: ..., traitCollection: ...)`
    static func frequency_progress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.frequency_progress, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "frequency_stop", bundle: ..., traitCollection: ...)`
    static func frequency_stop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.frequency_stop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gengduo", bundle: ..., traitCollection: ...)`
    static func gengduo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gengduo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "getGroup", bundle: ..., traitCollection: ...)`
    static func getGroup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.getGroup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goodsdetail_jingpin_sign", bundle: ..., traitCollection: ...)`
    static func goodsdetail_jingpin_sign(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goodsdetail_jingpin_sign, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goodsdetail_like", bundle: ..., traitCollection: ...)`
    static func goodsdetail_like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goodsdetail_like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goodsdetail_live_invite_code_bg", bundle: ..., traitCollection: ...)`
    static func goodsdetail_live_invite_code_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goodsdetail_live_invite_code_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goodsdetail_new_buy", bundle: ..., traitCollection: ...)`
    static func goodsdetail_new_buy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goodsdetail_new_buy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goodsdetail_new_like", bundle: ..., traitCollection: ...)`
    static func goodsdetail_new_like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goodsdetail_new_like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goodsdetail_new_store", bundle: ..., traitCollection: ...)`
    static func goodsdetail_new_store(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goodsdetail_new_store, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goodsdetail_number", bundle: ..., traitCollection: ...)`
    static func goodsdetail_number(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goodsdetail_number, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goodsdetail_vip", bundle: ..., traitCollection: ...)`
    static func goodsdetail_vip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goodsdetail_vip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goodsdetail_vip_bg", bundle: ..., traitCollection: ...)`
    static func goodsdetail_vip_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goodsdetail_vip_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goodsdetail_vip_button_bg", bundle: ..., traitCollection: ...)`
    static func goodsdetail_vip_button_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goodsdetail_vip_button_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goodsdetail_vip_next", bundle: ..., traitCollection: ...)`
    static func goodsdetail_vip_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goodsdetail_vip_next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goodsdetail_vip_sign", bundle: ..., traitCollection: ...)`
    static func goodsdetail_vip_sign(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goodsdetail_vip_sign, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goodsdetail_x", bundle: ..., traitCollection: ...)`
    static func goodsdetail_x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goodsdetail_x, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_anli", bundle: ..., traitCollection: ...)`
    static func home_anli(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_anli, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_hangye", bundle: ..., traitCollection: ...)`
    static func home_hangye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_hangye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_huanjing", bundle: ..., traitCollection: ...)`
    static func home_huanjing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_huanjing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_jiance", bundle: ..., traitCollection: ...)`
    static func home_jiance(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_jiance, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_jiaoyi", bundle: ..., traitCollection: ...)`
    static func home_jiaoyi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_jiaoyi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_jichu", bundle: ..., traitCollection: ...)`
    static func home_jichu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_jichu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_lingdao", bundle: ..., traitCollection: ...)`
    static func home_lingdao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_lingdao, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_qihou", bundle: ..., traitCollection: ...)`
    static func home_qihou(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_qihou, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_redian", bundle: ..., traitCollection: ...)`
    static func home_redian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_redian, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_search", bundle: ..., traitCollection: ...)`
    static func home_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_search_gray", bundle: ..., traitCollection: ...)`
    static func home_search_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_search_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_vip_ad_bg", bundle: ..., traitCollection: ...)`
    static func home_vip_ad_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_vip_ad_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_xinfa", bundle: ..., traitCollection: ...)`
    static func home_xinfa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_xinfa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hx_compose_pic_add", bundle: ..., traitCollection: ...)`
    static func hx_compose_pic_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hx_compose_pic_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back_white", bundle: ..., traitCollection: ...)`
    static func ic_back_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lauch_bg.jpeg", bundle: ..., traitCollection: ...)`
    static func lauch_bgJpeg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lauch_bgJpeg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launch", bundle: ..., traitCollection: ...)`
    static func launch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launch_a", bundle: ..., traitCollection: ...)`
    static func launch_a(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_a, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_back", bundle: ..., traitCollection: ...)`
    static func live_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_backBG", bundle: ..., traitCollection: ...)`
    static func live_backBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_backBG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_cancel", bundle: ..., traitCollection: ...)`
    static func live_cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_close", bundle: ..., traitCollection: ...)`
    static func live_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_start", bundle: ..., traitCollection: ...)`
    static func live_start(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_start, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_switch", bundle: ..., traitCollection: ...)`
    static func live_switch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_switch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location", bundle: ..., traitCollection: ...)`
    static func location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_icon", bundle: ..., traitCollection: ...)`
    static func login_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_qq", bundle: ..., traitCollection: ...)`
    static func login_qq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_qq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_sina", bundle: ..., traitCollection: ...)`
    static func login_sina(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_sina, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_wechat", bundle: ..., traitCollection: ...)`
    static func login_wechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_wechat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_ublicity_bottom", bundle: ..., traitCollection: ...)`
    static func member_ublicity_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_ublicity_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "more_arrow", bundle: ..., traitCollection: ...)`
    static func more_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_account_bg", bundle: ..., traitCollection: ...)`
    static func my_account_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_account_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_account_button_bg", bundle: ..., traitCollection: ...)`
    static func my_account_button_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_account_button_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_account_button_unselect_bg", bundle: ..., traitCollection: ...)`
    static func my_account_button_unselect_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_account_button_unselect_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_address", bundle: ..., traitCollection: ...)`
    static func my_address(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_address, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_background", bundle: ..., traitCollection: ...)`
    static func my_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_cache", bundle: ..., traitCollection: ...)`
    static func my_cache(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_cache, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_call_server", bundle: ..., traitCollection: ...)`
    static func my_call_server(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_call_server, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_card_bg", bundle: ..., traitCollection: ...)`
    static func my_card_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_card_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_cart", bundle: ..., traitCollection: ...)`
    static func my_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_coupon", bundle: ..., traitCollection: ...)`
    static func my_coupon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_coupon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_coupon_d", bundle: ..., traitCollection: ...)`
    static func my_coupon_d(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_coupon_d, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_coupon_e", bundle: ..., traitCollection: ...)`
    static func my_coupon_e(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_coupon_e, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_course", bundle: ..., traitCollection: ...)`
    static func my_course(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_course, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_exam", bundle: ..., traitCollection: ...)`
    static func my_exam(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_exam, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_head", bundle: ..., traitCollection: ...)`
    static func my_head(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_head, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_invoice", bundle: ..., traitCollection: ...)`
    static func my_invoice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_invoice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_no_vip_zone_bg", bundle: ..., traitCollection: ...)`
    static func my_no_vip_zone_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_no_vip_zone_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_order", bundle: ..., traitCollection: ...)`
    static func my_order(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_order, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_personal_sel", bundle: ..., traitCollection: ...)`
    static func my_personal_sel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_personal_sel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_profit", bundle: ..., traitCollection: ...)`
    static func my_profit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_profit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_setting", bundle: ..., traitCollection: ...)`
    static func my_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_study", bundle: ..., traitCollection: ...)`
    static func my_study(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_study, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_vip_sign", bundle: ..., traitCollection: ...)`
    static func my_vip_sign(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_vip_sign, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_vip_zone_bg", bundle: ..., traitCollection: ...)`
    static func my_vip_zone_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_vip_zone_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "new_cart", bundle: ..., traitCollection: ...)`
    static func new_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "news_share", bundle: ..., traitCollection: ...)`
    static func news_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.news_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "news_watchNumber", bundle: ..., traitCollection: ...)`
    static func news_watchNumber(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.news_watchNumber, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "noSendResume", bundle: ..., traitCollection: ...)`
    static func noSendResume(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noSendResume, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order_line", bundle: ..., traitCollection: ...)`
    static func order_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order_line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order_minus", bundle: ..., traitCollection: ...)`
    static func order_minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order_minus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order_plus", bundle: ..., traitCollection: ...)`
    static func order_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order_plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pay_success", bundle: ..., traitCollection: ...)`
    static func pay_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pay_success, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_download_btn", bundle: ..., traitCollection: ...)`
    static func player_download_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_download_btn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_full_btn", bundle: ..., traitCollection: ...)`
    static func player_full_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_full_btn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_pause_btn", bundle: ..., traitCollection: ...)`
    static func player_pause_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_pause_btn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_play_big", bundle: ..., traitCollection: ...)`
    static func player_play_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_play_big, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_play_btn", bundle: ..., traitCollection: ...)`
    static func player_play_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_play_btn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_small_btn", bundle: ..., traitCollection: ...)`
    static func player_small_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_small_btn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "post_ receive", bundle: ..., traitCollection: ...)`
    static func post_Receive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.post_Receive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "post_ordered", bundle: ..., traitCollection: ...)`
    static func post_ordered(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.post_ordered, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "post_outStorage", bundle: ..., traitCollection: ...)`
    static func post_outStorage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.post_outStorage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "post_posting", bundle: ..., traitCollection: ...)`
    static func post_posting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.post_posting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "post_sendGoods", bundle: ..., traitCollection: ...)`
    static func post_sendGoods(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.post_sendGoods, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "privacy_topimage", bundle: ..., traitCollection: ...)`
    static func privacy_topimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privacy_topimage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "privilege", bundle: ..., traitCollection: ...)`
    static func privilege(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privilege, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "register_check_n", bundle: ..., traitCollection: ...)`
    static func register_check_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.register_check_n, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "register_check_s", bundle: ..., traitCollection: ...)`
    static func register_check_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.register_check_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "register_logo", bundle: ..., traitCollection: ...)`
    static func register_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.register_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "resumeSuccess", bundle: ..., traitCollection: ...)`
    static func resumeSuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.resumeSuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right_arrow", bundle: ..., traitCollection: ...)`
    static func right_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.right_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "searchBG", bundle: ..., traitCollection: ...)`
    static func searchBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchBG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendMSG", bundle: ..., traitCollection: ...)`
    static func sendMSG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendMSG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendResumeBtnBG", bundle: ..., traitCollection: ...)`
    static func sendResumeBtnBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendResumeBtnBG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "set_logo", bundle: ..., traitCollection: ...)`
    static func set_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.set_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "set_message", bundle: ..., traitCollection: ...)`
    static func set_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.set_message, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "set_opinion", bundle: ..., traitCollection: ...)`
    static func set_opinion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.set_opinion, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "set_service", bundle: ..., traitCollection: ...)`
    static func set_service(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.set_service, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "set_us", bundle: ..., traitCollection: ...)`
    static func set_us(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.set_us, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "share_copy", bundle: ..., traitCollection: ...)`
    static func share_copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_copy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "share_image", bundle: ..., traitCollection: ...)`
    static func share_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "share_timeline", bundle: ..., traitCollection: ...)`
    static func share_timeline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_timeline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "share_wallet", bundle: ..., traitCollection: ...)`
    static func share_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_wallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "share_wechat", bundle: ..., traitCollection: ...)`
    static func share_wechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_wechat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shopping_car", bundle: ..., traitCollection: ...)`
    static func shopping_car(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shopping_car, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "signleSelect", bundle: ..., traitCollection: ...)`
    static func signleSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signleSelect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "signleUnselect", bundle: ..., traitCollection: ...)`
    static func signleUnselect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signleUnselect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smallBrightness", bundle: ..., traitCollection: ...)`
    static func smallBrightness(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smallBrightness, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "staff", bundle: ..., traitCollection: ...)`
    static func staff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.staff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_classify_n", bundle: ..., traitCollection: ...)`
    static func tabbar_classify_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_classify_n, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_classify_s", bundle: ..., traitCollection: ...)`
    static func tabbar_classify_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_classify_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_home_n", bundle: ..., traitCollection: ...)`
    static func tabbar_home_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home_n, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_home_s", bundle: ..., traitCollection: ...)`
    static func tabbar_home_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_my_n", bundle: ..., traitCollection: ...)`
    static func tabbar_my_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_my_n, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_my_s", bundle: ..., traitCollection: ...)`
    static func tabbar_my_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_my_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_news_n", bundle: ..., traitCollection: ...)`
    static func tabbar_news_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_news_n, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_news_s", bundle: ..., traitCollection: ...)`
    static func tabbar_news_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_news_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_purchase_n", bundle: ..., traitCollection: ...)`
    static func tabbar_purchase_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_purchase_n, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_purchase_s", bundle: ..., traitCollection: ...)`
    static func tabbar_purchase_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_purchase_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_study_n", bundle: ..., traitCollection: ...)`
    static func tabbar_study_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_study_n, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_study_s", bundle: ..., traitCollection: ...)`
    static func tabbar_study_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_study_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_ali", bundle: ..., traitCollection: ...)`
    static func wallet_ali(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_ali, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_choose_n", bundle: ..., traitCollection: ...)`
    static func wallet_choose_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_choose_n, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_choose_s", bundle: ..., traitCollection: ...)`
    static func wallet_choose_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_choose_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_money_b", bundle: ..., traitCollection: ...)`
    static func wallet_money_b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_money_b, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_money_s", bundle: ..., traitCollection: ...)`
    static func wallet_money_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_money_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_wechat", bundle: ..., traitCollection: ...)`
    static func wallet_wechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_wechat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xxleft", bundle: ..., traitCollection: ...)`
    static func xxleft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xxleft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xxright", bundle: ..., traitCollection: ...)`
    static func xxright(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xxright, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 54 nibs.
  struct nib {
    /// Nib `AddressTableViewCell`.
    static let addressTableViewCell = _R.nib._AddressTableViewCell()
    /// Nib `AnswerTableViewCell`.
    static let answerTableViewCell = _R.nib._AnswerTableViewCell()
    /// Nib `BaseActionSheetView`.
    static let baseActionSheetView = _R.nib._BaseActionSheetView()
    /// Nib `BaseInfoTableViewCell`.
    static let baseInfoTableViewCell = _R.nib._BaseInfoTableViewCell()
    /// Nib `BookCollectionViewCell`.
    static let bookCollectionViewCell = _R.nib._BookCollectionViewCell()
    /// Nib `BookTableViewCell`.
    static let bookTableViewCell = _R.nib._BookTableViewCell()
    /// Nib `CartTableViewCell`.
    static let cartTableViewCell = _R.nib._CartTableViewCell()
    /// Nib `ClassTableViewCell`.
    static let classTableViewCell = _R.nib._ClassTableViewCell()
    /// Nib `ClassifyTableViewCell`.
    static let classifyTableViewCell = _R.nib._ClassifyTableViewCell()
    /// Nib `CouponListView`.
    static let couponListView = _R.nib._CouponListView()
    /// Nib `CouponTableViewCell`.
    static let couponTableViewCell = _R.nib._CouponTableViewCell()
    /// Nib `CouponTypeCollectionViewCell`.
    static let couponTypeCollectionViewCell = _R.nib._CouponTypeCollectionViewCell()
    /// Nib `CourseCardTableViewCell`.
    static let courseCardTableViewCell = _R.nib._CourseCardTableViewCell()
    /// Nib `CourseClassifyCollectionViewCell`.
    static let courseClassifyCollectionViewCell = _R.nib._CourseClassifyCollectionViewCell()
    /// Nib `CourseCollectionViewCell`.
    static let courseCollectionViewCell = _R.nib._CourseCollectionViewCell()
    /// Nib `CourseDownloadTableViewCell`.
    static let courseDownloadTableViewCell = _R.nib._CourseDownloadTableViewCell()
    /// Nib `CourseVideoListTableViewCell`.
    static let courseVideoListTableViewCell = _R.nib._CourseVideoListTableViewCell()
    /// Nib `DownloadedTableViewCell`.
    static let downloadedTableViewCell = _R.nib._DownloadedTableViewCell()
    /// Nib `DownloadingTableViewCell`.
    static let downloadingTableViewCell = _R.nib._DownloadingTableViewCell()
    /// Nib `ExamRecordCollectionViewCell`.
    static let examRecordCollectionViewCell = _R.nib._ExamRecordCollectionViewCell()
    /// Nib `ExamTableViewCell`.
    static let examTableViewCell = _R.nib._ExamTableViewCell()
    /// Nib `FinishedDownloadTableViewCell`.
    static let finishedDownloadTableViewCell = _R.nib._FinishedDownloadTableViewCell()
    /// Nib `GoodsActivityTableViewCell`.
    static let goodsActivityTableViewCell = _R.nib._GoodsActivityTableViewCell()
    /// Nib `GoodsBuyCountTableViewCell`.
    static let goodsBuyCountTableViewCell = _R.nib._GoodsBuyCountTableViewCell()
    /// Nib `GoodsCouponTableViewCell`.
    static let goodsCouponTableViewCell = _R.nib._GoodsCouponTableViewCell()
    /// Nib `GoodsDetailBottomView`.
    static let goodsDetailBottomView = _R.nib._GoodsDetailBottomView()
    /// Nib `GoodsInfoTableViewCell`.
    static let goodsInfoTableViewCell = _R.nib._GoodsInfoTableViewCell()
    /// Nib `GoodsServiceTableViewCell`.
    static let goodsServiceTableViewCell = _R.nib._GoodsServiceTableViewCell()
    /// Nib `HomeBannerCollectionViewCell`.
    static let homeBannerCollectionViewCell = _R.nib._HomeBannerCollectionViewCell()
    /// Nib `HomeCourseTableViewCell`.
    static let homeCourseTableViewCell = _R.nib._HomeCourseTableViewCell()
    /// Nib `HomeModuleCollectionViewCell`.
    static let homeModuleCollectionViewCell = _R.nib._HomeModuleCollectionViewCell()
    /// Nib `InvoiceInfoTableViewCell`.
    static let invoiceInfoTableViewCell = _R.nib._InvoiceInfoTableViewCell()
    /// Nib `InvoiceView`.
    static let invoiceView = _R.nib._InvoiceView()
    /// Nib `LiveTableViewCell`.
    static let liveTableViewCell = _R.nib._LiveTableViewCell()
    /// Nib `MyHeadView`.
    static let myHeadView = _R.nib._MyHeadView()
    /// Nib `MyTableViewCell`.
    static let myTableViewCell = _R.nib._MyTableViewCell()
    /// Nib `NewsTableViewCell`.
    static let newsTableViewCell = _R.nib._NewsTableViewCell()
    /// Nib `OrderGoodsCollectionViewCell`.
    static let orderGoodsCollectionViewCell = _R.nib._OrderGoodsCollectionViewCell()
    /// Nib `OrderTableViewCell`.
    static let orderTableViewCell = _R.nib._OrderTableViewCell()
    /// Nib `PayMethodView`.
    static let payMethodView = _R.nib._PayMethodView()
    /// Nib `ProfitTableViewCell`.
    static let profitTableViewCell = _R.nib._ProfitTableViewCell()
    /// Nib `QuestionTableViewCell`.
    static let questionTableViewCell = _R.nib._QuestionTableViewCell()
    /// Nib `RechargeCollectionViewCell`.
    static let rechargeCollectionViewCell = _R.nib._RechargeCollectionViewCell()
    /// Nib `RecommendTableViewCell`.
    static let recommendTableViewCell = _R.nib._RecommendTableViewCell()
    /// Nib `SetTableViewCell`.
    static let setTableViewCell = _R.nib._SetTableViewCell()
    /// Nib `ShareActivityTableViewCell`.
    static let shareActivityTableViewCell = _R.nib._ShareActivityTableViewCell()
    /// Nib `ShareView`.
    static let shareView = _R.nib._ShareView()
    /// Nib `SimplyAnswerTableViewCell`.
    static let simplyAnswerTableViewCell = _R.nib._SimplyAnswerTableViewCell()
    /// Nib `StudyTableViewCell`.
    static let studyTableViewCell = _R.nib._StudyTableViewCell()
    /// Nib `SubClassifyCollectionViewCell`.
    static let subClassifyCollectionViewCell = _R.nib._SubClassifyCollectionViewCell()
    /// Nib `TrainCollectionViewCell`.
    static let trainCollectionViewCell = _R.nib._TrainCollectionViewCell()
    /// Nib `TrainTableViewCell`.
    static let trainTableViewCell = _R.nib._TrainTableViewCell()
    /// Nib `UserAvatorTableViewCell`.
    static let userAvatorTableViewCell = _R.nib._UserAvatorTableViewCell()
    /// Nib `UserInfoInputView`.
    static let userInfoInputView = _R.nib._UserInfoInputView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddressTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addressTableViewCell) instead")
    static func addressTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addressTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AnswerTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.answerTableViewCell) instead")
    static func answerTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.answerTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BaseActionSheetView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.baseActionSheetView) instead")
    static func baseActionSheetView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.baseActionSheetView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BaseInfoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.baseInfoTableViewCell) instead")
    static func baseInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.baseInfoTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BookCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bookCollectionViewCell) instead")
    static func bookCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bookCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BookTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bookTableViewCell) instead")
    static func bookTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bookTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CartTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cartTableViewCell) instead")
    static func cartTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cartTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ClassTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.classTableViewCell) instead")
    static func classTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.classTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ClassifyTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.classifyTableViewCell) instead")
    static func classifyTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.classifyTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CouponListView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.couponListView) instead")
    static func couponListView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.couponListView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CouponTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.couponTableViewCell) instead")
    static func couponTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.couponTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CouponTypeCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.couponTypeCollectionViewCell) instead")
    static func couponTypeCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.couponTypeCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CourseCardTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.courseCardTableViewCell) instead")
    static func courseCardTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.courseCardTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CourseClassifyCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.courseClassifyCollectionViewCell) instead")
    static func courseClassifyCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.courseClassifyCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CourseCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.courseCollectionViewCell) instead")
    static func courseCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.courseCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CourseDownloadTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.courseDownloadTableViewCell) instead")
    static func courseDownloadTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.courseDownloadTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CourseVideoListTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.courseVideoListTableViewCell) instead")
    static func courseVideoListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.courseVideoListTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DownloadedTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.downloadedTableViewCell) instead")
    static func downloadedTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.downloadedTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DownloadingTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.downloadingTableViewCell) instead")
    static func downloadingTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.downloadingTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ExamRecordCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.examRecordCollectionViewCell) instead")
    static func examRecordCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.examRecordCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ExamTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.examTableViewCell) instead")
    static func examTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.examTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FinishedDownloadTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.finishedDownloadTableViewCell) instead")
    static func finishedDownloadTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.finishedDownloadTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GoodsActivityTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.goodsActivityTableViewCell) instead")
    static func goodsActivityTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.goodsActivityTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GoodsBuyCountTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.goodsBuyCountTableViewCell) instead")
    static func goodsBuyCountTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.goodsBuyCountTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GoodsCouponTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.goodsCouponTableViewCell) instead")
    static func goodsCouponTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.goodsCouponTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GoodsDetailBottomView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.goodsDetailBottomView) instead")
    static func goodsDetailBottomView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.goodsDetailBottomView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GoodsInfoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.goodsInfoTableViewCell) instead")
    static func goodsInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.goodsInfoTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GoodsServiceTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.goodsServiceTableViewCell) instead")
    static func goodsServiceTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.goodsServiceTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeBannerCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeBannerCollectionViewCell) instead")
    static func homeBannerCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeBannerCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeCourseTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeCourseTableViewCell) instead")
    static func homeCourseTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeCourseTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeModuleCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeModuleCollectionViewCell) instead")
    static func homeModuleCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeModuleCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InvoiceInfoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.invoiceInfoTableViewCell) instead")
    static func invoiceInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invoiceInfoTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InvoiceView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.invoiceView) instead")
    static func invoiceView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invoiceView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LiveTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.liveTableViewCell) instead")
    static func liveTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.liveTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyHeadView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myHeadView) instead")
    static func myHeadView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myHeadView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myTableViewCell) instead")
    static func myTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NewsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.newsTableViewCell) instead")
    static func newsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newsTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderGoodsCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderGoodsCollectionViewCell) instead")
    static func orderGoodsCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderGoodsCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderTableViewCell) instead")
    static func orderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PayMethodView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.payMethodView) instead")
    static func payMethodView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.payMethodView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfitTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profitTableViewCell) instead")
    static func profitTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profitTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuestionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.questionTableViewCell) instead")
    static func questionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questionTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RechargeCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.rechargeCollectionViewCell) instead")
    static func rechargeCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rechargeCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RecommendTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.recommendTableViewCell) instead")
    static func recommendTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.recommendTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SetTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.setTableViewCell) instead")
    static func setTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.setTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ShareActivityTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.shareActivityTableViewCell) instead")
    static func shareActivityTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shareActivityTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ShareView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.shareView) instead")
    static func shareView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shareView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SimplyAnswerTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.simplyAnswerTableViewCell) instead")
    static func simplyAnswerTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.simplyAnswerTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StudyTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.studyTableViewCell) instead")
    static func studyTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.studyTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SubClassifyCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.subClassifyCollectionViewCell) instead")
    static func subClassifyCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.subClassifyCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TrainCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.trainCollectionViewCell) instead")
    static func trainCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.trainCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TrainTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.trainTableViewCell) instead")
    static func trainTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.trainTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserAvatorTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userAvatorTableViewCell) instead")
    static func userAvatorTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userAvatorTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserInfoInputView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userInfoInputView) instead")
    static func userInfoInputView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userInfoInputView)
    }
    #endif

    static func addressTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddressTableViewCell? {
      return R.nib.addressTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressTableViewCell
    }

    static func answerTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AnswerTableViewCell? {
      return R.nib.answerTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnswerTableViewCell
    }

    static func baseActionSheetView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BaseActionSheetView? {
      return R.nib.baseActionSheetView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BaseActionSheetView
    }

    static func baseInfoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BaseInfoTableViewCell? {
      return R.nib.baseInfoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BaseInfoTableViewCell
    }

    static func bookCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BookCollectionViewCell? {
      return R.nib.bookCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookCollectionViewCell
    }

    static func bookTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BookTableViewCell? {
      return R.nib.bookTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookTableViewCell
    }

    static func cartTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CartTableViewCell? {
      return R.nib.cartTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CartTableViewCell
    }

    static func classTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ClassTableViewCell? {
      return R.nib.classTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClassTableViewCell
    }

    static func classifyTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ClassifyTableViewCell? {
      return R.nib.classifyTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClassifyTableViewCell
    }

    static func couponListView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CouponListView? {
      return R.nib.couponListView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CouponListView
    }

    static func couponTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CouponTableViewCell? {
      return R.nib.couponTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CouponTableViewCell
    }

    static func couponTypeCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CouponTypeCollectionViewCell? {
      return R.nib.couponTypeCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CouponTypeCollectionViewCell
    }

    static func courseCardTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseCardTableViewCell? {
      return R.nib.courseCardTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseCardTableViewCell
    }

    static func courseClassifyCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseClassifyCollectionViewCell? {
      return R.nib.courseClassifyCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseClassifyCollectionViewCell
    }

    static func courseCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseCollectionViewCell? {
      return R.nib.courseCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseCollectionViewCell
    }

    static func courseDownloadTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseDownloadTableViewCell? {
      return R.nib.courseDownloadTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseDownloadTableViewCell
    }

    static func courseVideoListTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseVideoListTableViewCell? {
      return R.nib.courseVideoListTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseVideoListTableViewCell
    }

    static func downloadedTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DownloadedTableViewCell? {
      return R.nib.downloadedTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DownloadedTableViewCell
    }

    static func downloadingTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DownloadingTableViewCell? {
      return R.nib.downloadingTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DownloadingTableViewCell
    }

    static func examRecordCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExamRecordCollectionViewCell? {
      return R.nib.examRecordCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExamRecordCollectionViewCell
    }

    static func examTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExamTableViewCell? {
      return R.nib.examTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExamTableViewCell
    }

    static func finishedDownloadTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCourseTableViewCell? {
      return R.nib.finishedDownloadTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCourseTableViewCell
    }

    static func goodsActivityTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GoodsActivityTableViewCell? {
      return R.nib.goodsActivityTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodsActivityTableViewCell
    }

    static func goodsBuyCountTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GoodsBuyCountTableViewCell? {
      return R.nib.goodsBuyCountTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodsBuyCountTableViewCell
    }

    static func goodsCouponTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GoodsCouponTableViewCell? {
      return R.nib.goodsCouponTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodsCouponTableViewCell
    }

    static func goodsDetailBottomView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.goodsDetailBottomView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func goodsInfoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GoodsInfoTableViewCell? {
      return R.nib.goodsInfoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodsInfoTableViewCell
    }

    static func goodsServiceTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GoodsServiceTableViewCell? {
      return R.nib.goodsServiceTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodsServiceTableViewCell
    }

    static func homeBannerCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBannerCollectionViewCell? {
      return R.nib.homeBannerCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBannerCollectionViewCell
    }

    static func homeCourseTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCourseTableViewCell? {
      return R.nib.homeCourseTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCourseTableViewCell
    }

    static func homeModuleCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeModuleCollectionViewCell? {
      return R.nib.homeModuleCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeModuleCollectionViewCell
    }

    static func invoiceInfoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvoiceInfoTableViewCell? {
      return R.nib.invoiceInfoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvoiceInfoTableViewCell
    }

    static func invoiceView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvoiceView? {
      return R.nib.invoiceView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvoiceView
    }

    static func liveTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LiveTableViewCell? {
      return R.nib.liveTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LiveTableViewCell
    }

    static func myHeadView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.myHeadView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func myTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyTableViewCell? {
      return R.nib.myTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyTableViewCell
    }

    static func newsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewsTableViewCell? {
      return R.nib.newsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewsTableViewCell
    }

    static func orderGoodsCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderGoodsCollectionViewCell? {
      return R.nib.orderGoodsCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderGoodsCollectionViewCell
    }

    static func orderTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderTableViewCell? {
      return R.nib.orderTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderTableViewCell
    }

    static func payMethodView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.payMethodView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func profitTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfitTableViewCell? {
      return R.nib.profitTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfitTableViewCell
    }

    static func questionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionTableViewCell? {
      return R.nib.questionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionTableViewCell
    }

    static func rechargeCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RechargeCollectionViewCell? {
      return R.nib.rechargeCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RechargeCollectionViewCell
    }

    static func recommendTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecommendTableViewCell? {
      return R.nib.recommendTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecommendTableViewCell
    }

    static func setTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SetTableViewCell? {
      return R.nib.setTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SetTableViewCell
    }

    static func shareActivityTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShareActivityTableViewCell? {
      return R.nib.shareActivityTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShareActivityTableViewCell
    }

    static func shareView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShareView? {
      return R.nib.shareView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShareView
    }

    static func simplyAnswerTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SimplyAnswerTableViewCell? {
      return R.nib.simplyAnswerTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SimplyAnswerTableViewCell
    }

    static func studyTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StudyTableViewCell? {
      return R.nib.studyTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StudyTableViewCell
    }

    static func subClassifyCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubClassifyCollectionViewCell? {
      return R.nib.subClassifyCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubClassifyCollectionViewCell
    }

    static func trainCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TrainCollectionViewCell? {
      return R.nib.trainCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TrainCollectionViewCell
    }

    static func trainTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TrainTableViewCell? {
      return R.nib.trainTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TrainTableViewCell
    }

    static func userAvatorTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserAvatorTableViewCell? {
      return R.nib.userAvatorTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserAvatorTableViewCell
    }

    static func userInfoInputView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserInfoInputView? {
      return R.nib.userInfoInputView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserInfoInputView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 46 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddressTableViewCell`.
    static let addressTableViewCell: Rswift.ReuseIdentifier<AddressTableViewCell> = Rswift.ReuseIdentifier(identifier: "AddressTableViewCell")
    /// Reuse identifier `AnswerTableViewCell`.
    static let answerTableViewCell: Rswift.ReuseIdentifier<AnswerTableViewCell> = Rswift.ReuseIdentifier(identifier: "AnswerTableViewCell")
    /// Reuse identifier `BaseInfoTableViewCell`.
    static let baseInfoTableViewCell: Rswift.ReuseIdentifier<BaseInfoTableViewCell> = Rswift.ReuseIdentifier(identifier: "BaseInfoTableViewCell")
    /// Reuse identifier `BookCollectionViewCell`.
    static let bookCollectionViewCell: Rswift.ReuseIdentifier<BookCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "BookCollectionViewCell")
    /// Reuse identifier `BookTableViewCell`.
    static let bookTableViewCell: Rswift.ReuseIdentifier<BookTableViewCell> = Rswift.ReuseIdentifier(identifier: "BookTableViewCell")
    /// Reuse identifier `CartTableViewCell`.
    static let cartTableViewCell: Rswift.ReuseIdentifier<CartTableViewCell> = Rswift.ReuseIdentifier(identifier: "CartTableViewCell")
    /// Reuse identifier `ClassTableViewCell`.
    static let classTableViewCell: Rswift.ReuseIdentifier<ClassTableViewCell> = Rswift.ReuseIdentifier(identifier: "ClassTableViewCell")
    /// Reuse identifier `ClassifyTableViewCell`.
    static let classifyTableViewCell: Rswift.ReuseIdentifier<ClassifyTableViewCell> = Rswift.ReuseIdentifier(identifier: "ClassifyTableViewCell")
    /// Reuse identifier `CouponTableViewCell`.
    static let couponTableViewCell: Rswift.ReuseIdentifier<CouponTableViewCell> = Rswift.ReuseIdentifier(identifier: "CouponTableViewCell")
    /// Reuse identifier `CouponTypeCollectionViewCell`.
    static let couponTypeCollectionViewCell: Rswift.ReuseIdentifier<CouponTypeCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "CouponTypeCollectionViewCell")
    /// Reuse identifier `CourseCardTableViewCell`.
    static let courseCardTableViewCell: Rswift.ReuseIdentifier<CourseCardTableViewCell> = Rswift.ReuseIdentifier(identifier: "CourseCardTableViewCell")
    /// Reuse identifier `CourseClassifyCollectionViewCell`.
    static let courseClassifyCollectionViewCell: Rswift.ReuseIdentifier<CourseClassifyCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "CourseClassifyCollectionViewCell")
    /// Reuse identifier `CourseCollectionViewCell`.
    static let courseCollectionViewCell: Rswift.ReuseIdentifier<CourseCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "CourseCollectionViewCell")
    /// Reuse identifier `CourseDownloadTableViewCell`.
    static let courseDownloadTableViewCell: Rswift.ReuseIdentifier<CourseDownloadTableViewCell> = Rswift.ReuseIdentifier(identifier: "CourseDownloadTableViewCell")
    /// Reuse identifier `CourseVideoListTableViewCell`.
    static let courseVideoListTableViewCell: Rswift.ReuseIdentifier<CourseVideoListTableViewCell> = Rswift.ReuseIdentifier(identifier: "CourseVideoListTableViewCell")
    /// Reuse identifier `DownloadedTableViewCell`.
    static let downloadedTableViewCell: Rswift.ReuseIdentifier<DownloadedTableViewCell> = Rswift.ReuseIdentifier(identifier: "DownloadedTableViewCell")
    /// Reuse identifier `DownloadingTableViewCell`.
    static let downloadingTableViewCell: Rswift.ReuseIdentifier<DownloadingTableViewCell> = Rswift.ReuseIdentifier(identifier: "DownloadingTableViewCell")
    /// Reuse identifier `ExamRecordCollectionViewCell`.
    static let examRecordCollectionViewCell: Rswift.ReuseIdentifier<ExamRecordCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ExamRecordCollectionViewCell")
    /// Reuse identifier `ExamTableViewCell`.
    static let examTableViewCell: Rswift.ReuseIdentifier<ExamTableViewCell> = Rswift.ReuseIdentifier(identifier: "ExamTableViewCell")
    /// Reuse identifier `FinishedDownloadTableViewCell`.
    static let finishedDownloadTableViewCell: Rswift.ReuseIdentifier<HomeCourseTableViewCell> = Rswift.ReuseIdentifier(identifier: "FinishedDownloadTableViewCell")
    /// Reuse identifier `GoodsActivityTableViewCell`.
    static let goodsActivityTableViewCell: Rswift.ReuseIdentifier<GoodsActivityTableViewCell> = Rswift.ReuseIdentifier(identifier: "GoodsActivityTableViewCell")
    /// Reuse identifier `GoodsBuyCountTableViewCell`.
    static let goodsBuyCountTableViewCell: Rswift.ReuseIdentifier<GoodsBuyCountTableViewCell> = Rswift.ReuseIdentifier(identifier: "GoodsBuyCountTableViewCell")
    /// Reuse identifier `GoodsCouponTableViewCell`.
    static let goodsCouponTableViewCell: Rswift.ReuseIdentifier<GoodsCouponTableViewCell> = Rswift.ReuseIdentifier(identifier: "GoodsCouponTableViewCell")
    /// Reuse identifier `GoodsInfoTableViewCell`.
    static let goodsInfoTableViewCell: Rswift.ReuseIdentifier<GoodsInfoTableViewCell> = Rswift.ReuseIdentifier(identifier: "GoodsInfoTableViewCell")
    /// Reuse identifier `GoodsServiceTableViewCell`.
    static let goodsServiceTableViewCell: Rswift.ReuseIdentifier<GoodsServiceTableViewCell> = Rswift.ReuseIdentifier(identifier: "GoodsServiceTableViewCell")
    /// Reuse identifier `HomeBannerCollectionViewCell`.
    static let homeBannerCollectionViewCell: Rswift.ReuseIdentifier<HomeBannerCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "HomeBannerCollectionViewCell")
    /// Reuse identifier `HomeCourseTableViewCell`.
    static let homeCourseTableViewCell: Rswift.ReuseIdentifier<HomeCourseTableViewCell> = Rswift.ReuseIdentifier(identifier: "HomeCourseTableViewCell")
    /// Reuse identifier `HomeModuleCollectionViewCell`.
    static let homeModuleCollectionViewCell: Rswift.ReuseIdentifier<HomeModuleCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "HomeModuleCollectionViewCell")
    /// Reuse identifier `InvoiceInfoTableViewCell`.
    static let invoiceInfoTableViewCell: Rswift.ReuseIdentifier<InvoiceInfoTableViewCell> = Rswift.ReuseIdentifier(identifier: "InvoiceInfoTableViewCell")
    /// Reuse identifier `LiveTableViewCell`.
    static let liveTableViewCell: Rswift.ReuseIdentifier<LiveTableViewCell> = Rswift.ReuseIdentifier(identifier: "LiveTableViewCell")
    /// Reuse identifier `MyTableViewCell`.
    static let myTableViewCell: Rswift.ReuseIdentifier<MyTableViewCell> = Rswift.ReuseIdentifier(identifier: "MyTableViewCell")
    /// Reuse identifier `NewsTableViewCell`.
    static let newsTableViewCell: Rswift.ReuseIdentifier<NewsTableViewCell> = Rswift.ReuseIdentifier(identifier: "NewsTableViewCell")
    /// Reuse identifier `OrderGoodsCollectionViewCell`.
    static let orderGoodsCollectionViewCell: Rswift.ReuseIdentifier<OrderGoodsCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "OrderGoodsCollectionViewCell")
    /// Reuse identifier `OrderTableViewCell`.
    static let orderTableViewCell: Rswift.ReuseIdentifier<OrderTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrderTableViewCell")
    /// Reuse identifier `ProfitTableViewCell`.
    static let profitTableViewCell: Rswift.ReuseIdentifier<ProfitTableViewCell> = Rswift.ReuseIdentifier(identifier: "ProfitTableViewCell")
    /// Reuse identifier `QuestionTableViewCell`.
    static let questionTableViewCell: Rswift.ReuseIdentifier<QuestionTableViewCell> = Rswift.ReuseIdentifier(identifier: "QuestionTableViewCell")
    /// Reuse identifier `RechargeCollectionViewCell`.
    static let rechargeCollectionViewCell: Rswift.ReuseIdentifier<RechargeCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "RechargeCollectionViewCell")
    /// Reuse identifier `RecommendTableViewCell`.
    static let recommendTableViewCell: Rswift.ReuseIdentifier<RecommendTableViewCell> = Rswift.ReuseIdentifier(identifier: "RecommendTableViewCell")
    /// Reuse identifier `SetTableViewCell`.
    static let setTableViewCell: Rswift.ReuseIdentifier<SetTableViewCell> = Rswift.ReuseIdentifier(identifier: "SetTableViewCell")
    /// Reuse identifier `ShareActivityTableViewCell`.
    static let shareActivityTableViewCell: Rswift.ReuseIdentifier<ShareActivityTableViewCell> = Rswift.ReuseIdentifier(identifier: "ShareActivityTableViewCell")
    /// Reuse identifier `SimplyAnswerTableViewCell`.
    static let simplyAnswerTableViewCell: Rswift.ReuseIdentifier<SimplyAnswerTableViewCell> = Rswift.ReuseIdentifier(identifier: "SimplyAnswerTableViewCell")
    /// Reuse identifier `StudyTableViewCell`.
    static let studyTableViewCell: Rswift.ReuseIdentifier<StudyTableViewCell> = Rswift.ReuseIdentifier(identifier: "StudyTableViewCell")
    /// Reuse identifier `SubClassifyCollectionViewCell`.
    static let subClassifyCollectionViewCell: Rswift.ReuseIdentifier<SubClassifyCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "SubClassifyCollectionViewCell")
    /// Reuse identifier `TrainCollectionViewCell`.
    static let trainCollectionViewCell: Rswift.ReuseIdentifier<TrainCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "TrainCollectionViewCell")
    /// Reuse identifier `TrainTableViewCell`.
    static let trainTableViewCell: Rswift.ReuseIdentifier<TrainTableViewCell> = Rswift.ReuseIdentifier(identifier: "TrainTableViewCell")
    /// Reuse identifier `UserAvatorTableViewCell`.
    static let userAvatorTableViewCell: Rswift.ReuseIdentifier<UserAvatorTableViewCell> = Rswift.ReuseIdentifier(identifier: "UserAvatorTableViewCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddressTableViewCell.validate()
      try _AnswerTableViewCell.validate()
      try _BaseInfoTableViewCell.validate()
      try _BookCollectionViewCell.validate()
      try _BookTableViewCell.validate()
      try _CartTableViewCell.validate()
      try _ClassTableViewCell.validate()
      try _CouponListView.validate()
      try _CouponTableViewCell.validate()
      try _CourseCardTableViewCell.validate()
      try _CourseCollectionViewCell.validate()
      try _CourseDownloadTableViewCell.validate()
      try _CourseVideoListTableViewCell.validate()
      try _DownloadedTableViewCell.validate()
      try _DownloadingTableViewCell.validate()
      try _ExamRecordCollectionViewCell.validate()
      try _ExamTableViewCell.validate()
      try _FinishedDownloadTableViewCell.validate()
      try _GoodsInfoTableViewCell.validate()
      try _HomeBannerCollectionViewCell.validate()
      try _HomeCourseTableViewCell.validate()
      try _HomeModuleCollectionViewCell.validate()
      try _InvoiceInfoTableViewCell.validate()
      try _InvoiceView.validate()
      try _LiveTableViewCell.validate()
      try _MyHeadView.validate()
      try _NewsTableViewCell.validate()
      try _PayMethodView.validate()
      try _ShareView.validate()
      try _StudyTableViewCell.validate()
      try _TrainCollectionViewCell.validate()
      try _TrainTableViewCell.validate()
      try _UserAvatorTableViewCell.validate()
    }

    struct _AddressTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AddressTableViewCell

      let bundle = R.hostingBundle
      let identifier = "AddressTableViewCell"
      let name = "AddressTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddressTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "address_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'address_more' is used in nib 'AddressTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AnswerTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AnswerTableViewCell

      let bundle = R.hostingBundle
      let identifier = "AnswerTableViewCell"
      let name = "AnswerTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AnswerTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnswerTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cart_choose_n", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cart_choose_n' is used in nib 'AnswerTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cart_choose_s", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cart_choose_s' is used in nib 'AnswerTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BaseActionSheetView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BaseActionSheetView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BaseActionSheetView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BaseActionSheetView
      }

      fileprivate init() {}
    }

    struct _BaseInfoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BaseInfoTableViewCell

      let bundle = R.hostingBundle
      let identifier = "BaseInfoTableViewCell"
      let name = "BaseInfoTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BaseInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BaseInfoTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cell_arrow_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cell_arrow_right' is used in nib 'BaseInfoTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BookCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BookCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "BookCollectionViewCell"
      let name = "BookCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BookCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "default_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default_image' is used in nib 'BookCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BookTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BookTableViewCell

      let bundle = R.hostingBundle
      let identifier = "BookTableViewCell"
      let name = "BookTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BookTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "course_buyNumber", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'course_buyNumber' is used in nib 'BookTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "default_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default_image' is used in nib 'BookTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CartTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CartTableViewCell

      let bundle = R.hostingBundle
      let identifier = "CartTableViewCell"
      let name = "CartTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CartTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CartTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cart_choose_n", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cart_choose_n' is used in nib 'CartTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cart_choose_s", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cart_choose_s' is used in nib 'CartTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cart_minus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cart_minus' is used in nib 'CartTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cart_plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cart_plus' is used in nib 'CartTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "default_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default_image' is used in nib 'CartTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ClassTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ClassTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ClassTableViewCell"
      let name = "ClassTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ClassTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClassTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "default_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default_image' is used in nib 'ClassTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ClassifyTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ClassifyTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ClassifyTableViewCell"
      let name = "ClassifyTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ClassifyTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClassifyTableViewCell
      }

      fileprivate init() {}
    }

    struct _CouponListView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CouponListView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CouponListView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CouponListView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "button_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button_close' is used in nib 'CouponListView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CouponTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CouponTableViewCell

      let bundle = R.hostingBundle
      let identifier = "CouponTableViewCell"
      let name = "CouponTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CouponTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CouponTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "my_coupon_e", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my_coupon_e' is used in nib 'CouponTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CouponTypeCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CouponTypeCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "CouponTypeCollectionViewCell"
      let name = "CouponTypeCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CouponTypeCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CouponTypeCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _CourseCardTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CourseCardTableViewCell

      let bundle = R.hostingBundle
      let identifier = "CourseCardTableViewCell"
      let name = "CourseCardTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseCardTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseCardTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "my_card_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my_card_bg' is used in nib 'CourseCardTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CourseClassifyCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CourseClassifyCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "CourseClassifyCollectionViewCell"
      let name = "CourseClassifyCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseClassifyCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseClassifyCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _CourseCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CourseCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "CourseCollectionViewCell"
      let name = "CourseCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "course_buyNumber", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'course_buyNumber' is used in nib 'CourseCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "course_like_n", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'course_like_n' is used in nib 'CourseCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "default_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default_image' is used in nib 'CourseCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CourseDownloadTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CourseDownloadTableViewCell

      let bundle = R.hostingBundle
      let identifier = "CourseDownloadTableViewCell"
      let name = "CourseDownloadTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseDownloadTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseDownloadTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "player_download_btn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'player_download_btn' is used in nib 'CourseDownloadTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CourseVideoListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CourseVideoListTableViewCell

      let bundle = R.hostingBundle
      let identifier = "CourseVideoListTableViewCell"
      let name = "CourseVideoListTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseVideoListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseVideoListTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "default_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default_image' is used in nib 'CourseVideoListTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "player_play_big", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'player_play_big' is used in nib 'CourseVideoListTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DownloadedTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DownloadedTableViewCell

      let bundle = R.hostingBundle
      let identifier = "DownloadedTableViewCell"
      let name = "DownloadedTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DownloadedTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DownloadedTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "default_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default_image' is used in nib 'DownloadedTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DownloadingTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DownloadingTableViewCell

      let bundle = R.hostingBundle
      let identifier = "DownloadingTableViewCell"
      let name = "DownloadingTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DownloadingTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DownloadingTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "default_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default_image' is used in nib 'DownloadingTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ExamRecordCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ExamRecordCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "ExamRecordCollectionViewCell"
      let name = "ExamRecordCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExamRecordCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExamRecordCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "exam_record_oval", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'exam_record_oval' is used in nib 'ExamRecordCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ExamTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ExamTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ExamTableViewCell"
      let name = "ExamTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExamTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExamTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "default_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default_image' is used in nib 'ExamTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FinishedDownloadTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeCourseTableViewCell

      let bundle = R.hostingBundle
      let identifier = "FinishedDownloadTableViewCell"
      let name = "FinishedDownloadTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCourseTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCourseTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "default_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default_image' is used in nib 'FinishedDownloadTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GoodsActivityTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GoodsActivityTableViewCell

      let bundle = R.hostingBundle
      let identifier = "GoodsActivityTableViewCell"
      let name = "GoodsActivityTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GoodsActivityTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodsActivityTableViewCell
      }

      fileprivate init() {}
    }

    struct _GoodsBuyCountTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GoodsBuyCountTableViewCell

      let bundle = R.hostingBundle
      let identifier = "GoodsBuyCountTableViewCell"
      let name = "GoodsBuyCountTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GoodsBuyCountTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodsBuyCountTableViewCell
      }

      fileprivate init() {}
    }

    struct _GoodsCouponTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GoodsCouponTableViewCell

      let bundle = R.hostingBundle
      let identifier = "GoodsCouponTableViewCell"
      let name = "GoodsCouponTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GoodsCouponTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodsCouponTableViewCell
      }

      fileprivate init() {}
    }

    struct _GoodsDetailBottomView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GoodsDetailBottomView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _GoodsInfoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GoodsInfoTableViewCell

      let bundle = R.hostingBundle
      let identifier = "GoodsInfoTableViewCell"
      let name = "GoodsInfoTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GoodsInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodsInfoTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "course_buyNumber", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'course_buyNumber' is used in nib 'GoodsInfoTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "goodsdetail_like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'goodsdetail_like' is used in nib 'GoodsInfoTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share_wallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_wallet' is used in nib 'GoodsInfoTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GoodsServiceTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GoodsServiceTableViewCell

      let bundle = R.hostingBundle
      let identifier = "GoodsServiceTableViewCell"
      let name = "GoodsServiceTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GoodsServiceTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodsServiceTableViewCell
      }

      fileprivate init() {}
    }

    struct _HomeBannerCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeBannerCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "HomeBannerCollectionViewCell"
      let name = "HomeBannerCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBannerCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBannerCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "banner_default", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'banner_default' is used in nib 'HomeBannerCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeCourseTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeCourseTableViewCell

      let bundle = R.hostingBundle
      let identifier = "HomeCourseTableViewCell"
      let name = "HomeCourseTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCourseTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCourseTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "course_buyNumber", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'course_buyNumber' is used in nib 'HomeCourseTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "default_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default_image' is used in nib 'HomeCourseTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeModuleCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeModuleCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "HomeModuleCollectionViewCell"
      let name = "HomeModuleCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeModuleCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeModuleCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "home_huanjing", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home_huanjing' is used in nib 'HomeModuleCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _InvoiceInfoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = InvoiceInfoTableViewCell

      let bundle = R.hostingBundle
      let identifier = "InvoiceInfoTableViewCell"
      let name = "InvoiceInfoTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvoiceInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvoiceInfoTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "address_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'address_more' is used in nib 'InvoiceInfoTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _InvoiceView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "InvoiceView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvoiceView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvoiceView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "button_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button_close' is used in nib 'InvoiceView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LiveTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LiveTableViewCell

      let bundle = R.hostingBundle
      let identifier = "LiveTableViewCell"
      let name = "LiveTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LiveTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LiveTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "default_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default_image' is used in nib 'LiveTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MyHeadView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MyHeadView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "my_head", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my_head' is used in nib 'MyHeadView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "my_vip_sign", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my_vip_sign' is used in nib 'MyHeadView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "my_vip_zone_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my_vip_zone_bg' is used in nib 'MyHeadView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MyTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MyTableViewCell

      let bundle = R.hostingBundle
      let identifier = "MyTableViewCell"
      let name = "MyTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyTableViewCell
      }

      fileprivate init() {}
    }

    struct _NewsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NewsTableViewCell

      let bundle = R.hostingBundle
      let identifier = "NewsTableViewCell"
      let name = "NewsTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewsTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "default_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default_image' is used in nib 'NewsTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "news_watchNumber", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'news_watchNumber' is used in nib 'NewsTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OrderGoodsCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = OrderGoodsCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "OrderGoodsCollectionViewCell"
      let name = "OrderGoodsCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderGoodsCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderGoodsCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _OrderTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = OrderTableViewCell

      let bundle = R.hostingBundle
      let identifier = "OrderTableViewCell"
      let name = "OrderTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderTableViewCell
      }

      fileprivate init() {}
    }

    struct _PayMethodView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PayMethodView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "wallet_ali", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wallet_ali' is used in nib 'PayMethodView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wallet_choose_n", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wallet_choose_n' is used in nib 'PayMethodView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wallet_choose_s", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wallet_choose_s' is used in nib 'PayMethodView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wallet_money_s", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wallet_money_s' is used in nib 'PayMethodView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wallet_wechat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wallet_wechat' is used in nib 'PayMethodView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProfitTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProfitTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ProfitTableViewCell"
      let name = "ProfitTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfitTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfitTableViewCell
      }

      fileprivate init() {}
    }

    struct _QuestionTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = QuestionTableViewCell

      let bundle = R.hostingBundle
      let identifier = "QuestionTableViewCell"
      let name = "QuestionTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionTableViewCell
      }

      fileprivate init() {}
    }

    struct _RechargeCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RechargeCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "RechargeCollectionViewCell"
      let name = "RechargeCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RechargeCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RechargeCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _RecommendTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RecommendTableViewCell

      let bundle = R.hostingBundle
      let identifier = "RecommendTableViewCell"
      let name = "RecommendTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecommendTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecommendTableViewCell
      }

      fileprivate init() {}
    }

    struct _SetTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SetTableViewCell

      let bundle = R.hostingBundle
      let identifier = "SetTableViewCell"
      let name = "SetTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SetTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SetTableViewCell
      }

      fileprivate init() {}
    }

    struct _ShareActivityTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ShareActivityTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ShareActivityTableViewCell"
      let name = "ShareActivityTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShareActivityTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShareActivityTableViewCell
      }

      fileprivate init() {}
    }

    struct _ShareView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ShareView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShareView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShareView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "share_copy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_copy' is used in nib 'ShareView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_image' is used in nib 'ShareView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share_timeline", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_timeline' is used in nib 'ShareView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share_wechat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_wechat' is used in nib 'ShareView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SimplyAnswerTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SimplyAnswerTableViewCell

      let bundle = R.hostingBundle
      let identifier = "SimplyAnswerTableViewCell"
      let name = "SimplyAnswerTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SimplyAnswerTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SimplyAnswerTableViewCell
      }

      fileprivate init() {}
    }

    struct _StudyTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = StudyTableViewCell

      let bundle = R.hostingBundle
      let identifier = "StudyTableViewCell"
      let name = "StudyTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StudyTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StudyTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "default_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default_image' is used in nib 'StudyTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SubClassifyCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SubClassifyCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "SubClassifyCollectionViewCell"
      let name = "SubClassifyCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubClassifyCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubClassifyCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _TrainCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TrainCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "TrainCollectionViewCell"
      let name = "TrainCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TrainCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TrainCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "default_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default_image' is used in nib 'TrainCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "getGroup", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'getGroup' is used in nib 'TrainCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TrainTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TrainTableViewCell

      let bundle = R.hostingBundle
      let identifier = "TrainTableViewCell"
      let name = "TrainTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TrainTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TrainTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "course_buyNumber", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'course_buyNumber' is used in nib 'TrainTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "default_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default_image' is used in nib 'TrainTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _UserAvatorTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UserAvatorTableViewCell

      let bundle = R.hostingBundle
      let identifier = "UserAvatorTableViewCell"
      let name = "UserAvatorTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserAvatorTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserAvatorTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cell_arrow_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cell_arrow_right' is used in nib 'UserAvatorTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "my_head", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my_head' is used in nib 'UserAvatorTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _UserInfoInputView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserInfoInputView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserInfoInputView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserInfoInputView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try cart.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try classify.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try exam.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try home.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try login.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try my.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try news.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try recharge.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try study.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try videoPlayer.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct cart: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let cartViewController = StoryboardViewControllerResource<CartViewController>(identifier: "CartViewController")
      let confirmOrderViewController = StoryboardViewControllerResource<ConfirmOrderViewController>(identifier: "ConfirmOrderViewController")
      let name = "Cart"
      let payOrderViewController = StoryboardViewControllerResource<PayOrderViewController>(identifier: "PayOrderViewController")

      func cartViewController(_: Void = ()) -> CartViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cartViewController)
      }

      func confirmOrderViewController(_: Void = ()) -> ConfirmOrderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: confirmOrderViewController)
      }

      func payOrderViewController(_: Void = ()) -> PayOrderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: payOrderViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.cart().cartViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cartViewController' could not be loaded from storyboard 'Cart' as 'CartViewController'.") }
        if _R.storyboard.cart().confirmOrderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'confirmOrderViewController' could not be loaded from storyboard 'Cart' as 'ConfirmOrderViewController'.") }
        if _R.storyboard.cart().payOrderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'payOrderViewController' could not be loaded from storyboard 'Cart' as 'PayOrderViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct classify: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseNavigationViewController

      let bundle = R.hostingBundle
      let classifyViewController = StoryboardViewControllerResource<ClassifyViewController>(identifier: "ClassifyViewController")
      let name = "Classify"

      func classifyViewController(_: Void = ()) -> ClassifyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: classifyViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "classify_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'classify_bg' is used in storyboard 'Classify', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar_classify_n", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_classify_n' is used in storyboard 'Classify', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar_classify_s", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_classify_s' is used in storyboard 'Classify', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.classify().classifyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'classifyViewController' could not be loaded from storyboard 'Classify' as 'ClassifyViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct exam: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let examQuestionViewController = StoryboardViewControllerResource<ExamQuestionViewController>(identifier: "ExamQuestionViewController")
      let examRecordsViewController = StoryboardViewControllerResource<ExamRecordsViewController>(identifier: "ExamRecordsViewController")
      let examViewController = StoryboardViewControllerResource<ExamViewController>(identifier: "ExamViewController")
      let name = "Exam"

      func examQuestionViewController(_: Void = ()) -> ExamQuestionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: examQuestionViewController)
      }

      func examRecordsViewController(_: Void = ()) -> ExamRecordsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: examRecordsViewController)
      }

      func examViewController(_: Void = ()) -> ExamViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: examViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "exam_record_score_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'exam_record_score_icon' is used in storyboard 'Exam', but couldn't be loaded.") }
        if UIKit.UIImage(named: "more_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'more_arrow' is used in storyboard 'Exam', but couldn't be loaded.") }
        if UIKit.UIImage(named: "my_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my_background' is used in storyboard 'Exam', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.exam().examQuestionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'examQuestionViewController' could not be loaded from storyboard 'Exam' as 'ExamQuestionViewController'.") }
        if _R.storyboard.exam().examRecordsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'examRecordsViewController' could not be loaded from storyboard 'Exam' as 'ExamRecordsViewController'.") }
        if _R.storyboard.exam().examViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'examViewController' could not be loaded from storyboard 'Exam' as 'ExamViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct home: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let courseDetailViewController = StoryboardViewControllerResource<CourseDetailViewController>(identifier: "CourseDetailViewController")
      let courseProductListViewController = StoryboardViewControllerResource<CourseProductListViewController>(identifier: "CourseProductListViewController")
      let courseSectionListViewController = StoryboardViewControllerResource<CourseSectionListViewController>(identifier: "CourseSectionListViewController")
      let moreCoursesListViewController = StoryboardViewControllerResource<MoreCoursesListViewController>(identifier: "MoreCoursesListViewController")
      let name = "Home"
      let searchViewController = StoryboardViewControllerResource<SearchViewController>(identifier: "SearchViewController")
      let shareImageViewController = StoryboardViewControllerResource<ShareImageViewController>(identifier: "ShareImageViewController")

      func courseDetailViewController(_: Void = ()) -> CourseDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: courseDetailViewController)
      }

      func courseProductListViewController(_: Void = ()) -> CourseProductListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: courseProductListViewController)
      }

      func courseSectionListViewController(_: Void = ()) -> CourseSectionListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: courseSectionListViewController)
      }

      func moreCoursesListViewController(_: Void = ()) -> MoreCoursesListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: moreCoursesListViewController)
      }

      func searchViewController(_: Void = ()) -> SearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchViewController)
      }

      func shareImageViewController(_: Void = ()) -> ShareImageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shareImageViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "blue_share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blue_share' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "home_search_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home_search_gray' is used in storyboard 'Home', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.home().courseDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'courseDetailViewController' could not be loaded from storyboard 'Home' as 'CourseDetailViewController'.") }
        if _R.storyboard.home().courseProductListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'courseProductListViewController' could not be loaded from storyboard 'Home' as 'CourseProductListViewController'.") }
        if _R.storyboard.home().courseSectionListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'courseSectionListViewController' could not be loaded from storyboard 'Home' as 'CourseSectionListViewController'.") }
        if _R.storyboard.home().moreCoursesListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'moreCoursesListViewController' could not be loaded from storyboard 'Home' as 'MoreCoursesListViewController'.") }
        if _R.storyboard.home().searchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchViewController' could not be loaded from storyboard 'Home' as 'SearchViewController'.") }
        if _R.storyboard.home().shareImageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shareImageViewController' could not be loaded from storyboard 'Home' as 'ShareImageViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "lauch_bg.jpeg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lauch_bg.jpeg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseNavigationViewController

      let bindPhoneViewController = StoryboardViewControllerResource<BindPhoneViewController>(identifier: "BindPhoneViewController")
      let bundle = R.hostingBundle
      let finishRegisterViewController = StoryboardViewControllerResource<FinishRegisterViewController>(identifier: "FinishRegisterViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let modifyPasswordViewController = StoryboardViewControllerResource<ModifyPasswordViewController>(identifier: "ModifyPasswordViewController")
      let name = "Login"
      let passwordViewController = StoryboardViewControllerResource<PasswordViewController>(identifier: "PasswordViewController")
      let privacyConfirmViewController = StoryboardViewControllerResource<PrivacyConfirmViewController>(identifier: "PrivacyConfirmViewController")
      let registerViewController = StoryboardViewControllerResource<RegisterViewController>(identifier: "RegisterViewController")
      let verifyPhoneViewController = StoryboardViewControllerResource<VerifyPhoneViewController>(identifier: "VerifyPhoneViewController")

      func bindPhoneViewController(_: Void = ()) -> BindPhoneViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bindPhoneViewController)
      }

      func finishRegisterViewController(_: Void = ()) -> FinishRegisterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: finishRegisterViewController)
      }

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      func modifyPasswordViewController(_: Void = ()) -> ModifyPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: modifyPasswordViewController)
      }

      func passwordViewController(_: Void = ()) -> PasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: passwordViewController)
      }

      func privacyConfirmViewController(_: Void = ()) -> PrivacyConfirmViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: privacyConfirmViewController)
      }

      func registerViewController(_: Void = ()) -> RegisterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerViewController)
      }

      func verifyPhoneViewController(_: Void = ()) -> VerifyPhoneViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: verifyPhoneViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cart_choose_n", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cart_choose_n' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cart_choose_s", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cart_choose_s' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_icon' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login_qq", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_qq' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login_sina", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_sina' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login_wechat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_wechat' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "privacy_topimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'privacy_topimage' is used in storyboard 'Login', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.login().bindPhoneViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bindPhoneViewController' could not be loaded from storyboard 'Login' as 'BindPhoneViewController'.") }
        if _R.storyboard.login().finishRegisterViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'finishRegisterViewController' could not be loaded from storyboard 'Login' as 'FinishRegisterViewController'.") }
        if _R.storyboard.login().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
        if _R.storyboard.login().modifyPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'modifyPasswordViewController' could not be loaded from storyboard 'Login' as 'ModifyPasswordViewController'.") }
        if _R.storyboard.login().passwordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'passwordViewController' could not be loaded from storyboard 'Login' as 'PasswordViewController'.") }
        if _R.storyboard.login().privacyConfirmViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'privacyConfirmViewController' could not be loaded from storyboard 'Login' as 'PrivacyConfirmViewController'.") }
        if _R.storyboard.login().registerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerViewController' could not be loaded from storyboard 'Login' as 'RegisterViewController'.") }
        if _R.storyboard.login().verifyPhoneViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'verifyPhoneViewController' could not be loaded from storyboard 'Login' as 'VerifyPhoneViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseTabbarController

      let bundle = R.hostingBundle
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let myViewController = StoryboardViewControllerResource<MyViewController>(identifier: "MyViewController")
      let name = "Main"
      let studyBaseNavigationViewController = StoryboardViewControllerResource<BaseNavigationViewController>(identifier: "StudyBaseNavigationViewController")

      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }

      func myViewController(_: Void = ()) -> MyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myViewController)
      }

      func studyBaseNavigationViewController(_: Void = ()) -> BaseNavigationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: studyBaseNavigationViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "home_search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home_search' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "my_setting", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my_setting' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar_classify_n", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_classify_n' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar_classify_s", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_classify_s' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar_home_n", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_home_n' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar_home_s", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_home_s' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar_my_n", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_my_n' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar_my_s", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_my_s' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar_news_n", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_news_n' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar_news_s", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_news_s' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar_study_n", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_study_n' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar_study_s", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_study_s' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
        if _R.storyboard.main().myViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myViewController' could not be loaded from storyboard 'Main' as 'MyViewController'.") }
        if _R.storyboard.main().studyBaseNavigationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'studyBaseNavigationViewController' could not be loaded from storyboard 'Main' as 'BaseNavigationViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct my: Rswift.StoryboardResourceType, Rswift.Validatable {
      let aboutUsViewController = StoryboardViewControllerResource<AboutUsViewController>(identifier: "AboutUsViewController")
      let activeCouponViewController = StoryboardViewControllerResource<ActiveCouponViewController>(identifier: "ActiveCouponViewController")
      let addAddressViewController = StoryboardViewControllerResource<AddAddressViewController>(identifier: "AddAddressViewController")
      let addInVoidceViewController = StoryboardViewControllerResource<AddInVoidceViewController>(identifier: "AddInVoidceViewController")
      let addressListViewController = StoryboardViewControllerResource<AddressListViewController>(identifier: "AddressListViewController")
      let bundle = R.hostingBundle
      let couponListViewController = StoryboardViewControllerResource<CouponListViewController>(identifier: "CouponListViewController")
      let invoiceManageViewController = StoryboardViewControllerResource<InvoiceManageViewController>(identifier: "InvoiceManageViewController")
      let manageProfitViewController = StoryboardViewControllerResource<ManageProfitViewController>(identifier: "ManageProfitViewController")
      let myOrderViewController = StoryboardViewControllerResource<MyOrderViewController>(identifier: "MyOrderViewController")
      let name = "My"
      let offlineListViewController = StoryboardViewControllerResource<OfflineListViewController>(identifier: "OfflineListViewController")
      let openCourseViewController = StoryboardViewControllerResource<OpenCourseViewController>(identifier: "OpenCourseViewController")
      let orderDetailViewController = StoryboardViewControllerResource<OrderDetailViewController>(identifier: "OrderDetailViewController")
      let settingViewController = StoryboardViewControllerResource<SettingViewController>(identifier: "SettingViewController")
      let userInfoViewController = StoryboardViewControllerResource<UserInfoViewController>(identifier: "UserInfoViewController")

      func aboutUsViewController(_: Void = ()) -> AboutUsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutUsViewController)
      }

      func activeCouponViewController(_: Void = ()) -> ActiveCouponViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: activeCouponViewController)
      }

      func addAddressViewController(_: Void = ()) -> AddAddressViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addAddressViewController)
      }

      func addInVoidceViewController(_: Void = ()) -> AddInVoidceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addInVoidceViewController)
      }

      func addressListViewController(_: Void = ()) -> AddressListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addressListViewController)
      }

      func couponListViewController(_: Void = ()) -> CouponListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: couponListViewController)
      }

      func invoiceManageViewController(_: Void = ()) -> InvoiceManageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: invoiceManageViewController)
      }

      func manageProfitViewController(_: Void = ()) -> ManageProfitViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: manageProfitViewController)
      }

      func myOrderViewController(_: Void = ()) -> MyOrderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myOrderViewController)
      }

      func offlineListViewController(_: Void = ()) -> OfflineListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: offlineListViewController)
      }

      func openCourseViewController(_: Void = ()) -> OpenCourseViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: openCourseViewController)
      }

      func orderDetailViewController(_: Void = ()) -> OrderDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderDetailViewController)
      }

      func settingViewController(_: Void = ()) -> SettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingViewController)
      }

      func userInfoViewController(_: Void = ()) -> UserInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userInfoViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "set_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'set_logo' is used in storyboard 'My', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.my().aboutUsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutUsViewController' could not be loaded from storyboard 'My' as 'AboutUsViewController'.") }
        if _R.storyboard.my().activeCouponViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'activeCouponViewController' could not be loaded from storyboard 'My' as 'ActiveCouponViewController'.") }
        if _R.storyboard.my().addAddressViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addAddressViewController' could not be loaded from storyboard 'My' as 'AddAddressViewController'.") }
        if _R.storyboard.my().addInVoidceViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addInVoidceViewController' could not be loaded from storyboard 'My' as 'AddInVoidceViewController'.") }
        if _R.storyboard.my().addressListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addressListViewController' could not be loaded from storyboard 'My' as 'AddressListViewController'.") }
        if _R.storyboard.my().couponListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'couponListViewController' could not be loaded from storyboard 'My' as 'CouponListViewController'.") }
        if _R.storyboard.my().invoiceManageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'invoiceManageViewController' could not be loaded from storyboard 'My' as 'InvoiceManageViewController'.") }
        if _R.storyboard.my().manageProfitViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'manageProfitViewController' could not be loaded from storyboard 'My' as 'ManageProfitViewController'.") }
        if _R.storyboard.my().myOrderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myOrderViewController' could not be loaded from storyboard 'My' as 'MyOrderViewController'.") }
        if _R.storyboard.my().offlineListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'offlineListViewController' could not be loaded from storyboard 'My' as 'OfflineListViewController'.") }
        if _R.storyboard.my().openCourseViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'openCourseViewController' could not be loaded from storyboard 'My' as 'OpenCourseViewController'.") }
        if _R.storyboard.my().orderDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderDetailViewController' could not be loaded from storyboard 'My' as 'OrderDetailViewController'.") }
        if _R.storyboard.my().settingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingViewController' could not be loaded from storyboard 'My' as 'SettingViewController'.") }
        if _R.storyboard.my().userInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userInfoViewController' could not be loaded from storyboard 'My' as 'UserInfoViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct news: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseNavigationViewController

      let bundle = R.hostingBundle
      let name = "News"
      let newsBrowserViewController = StoryboardViewControllerResource<NewsBrowserViewController>(identifier: "NewsBrowserViewController")
      let newsDetailViewController = StoryboardViewControllerResource<NewsDetailViewController>(identifier: "NewsDetailViewController")
      let newsListViewController = StoryboardViewControllerResource<NewsListViewController>(identifier: "NewsListViewController")

      func newsBrowserViewController(_: Void = ()) -> NewsBrowserViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newsBrowserViewController)
      }

      func newsDetailViewController(_: Void = ()) -> NewsDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newsDetailViewController)
      }

      func newsListViewController(_: Void = ()) -> NewsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newsListViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "news_share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'news_share' is used in storyboard 'News', but couldn't be loaded.") }
        if UIKit.UIImage(named: "news_watchNumber", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'news_watchNumber' is used in storyboard 'News', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar_news_n", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_news_n' is used in storyboard 'News', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar_news_s", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_news_s' is used in storyboard 'News', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.news().newsBrowserViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newsBrowserViewController' could not be loaded from storyboard 'News' as 'NewsBrowserViewController'.") }
        if _R.storyboard.news().newsDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newsDetailViewController' could not be loaded from storyboard 'News' as 'NewsDetailViewController'.") }
        if _R.storyboard.news().newsListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newsListViewController' could not be loaded from storyboard 'News' as 'NewsListViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct recharge: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Recharge"
      let rechargeViewController = StoryboardViewControllerResource<RechargeViewController>(identifier: "RechargeViewController")

      func rechargeViewController(_: Void = ()) -> RechargeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rechargeViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Recharge', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.recharge().rechargeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rechargeViewController' could not be loaded from storyboard 'Recharge' as 'RechargeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct study: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MyStudyViewController

      let addSchoolRollViewController = StoryboardViewControllerResource<AddSchoolRollViewController>(identifier: "AddSchoolRollViewController")
      let bundle = R.hostingBundle
      let classCoursesListViewController = StoryboardViewControllerResource<ClassCoursesListViewController>(identifier: "ClassCoursesListViewController")
      let courseVideoDetailViewController = StoryboardViewControllerResource<CourseVideoDetailViewController>(identifier: "CourseVideoDetailViewController")
      let courseVideoListViewController = StoryboardViewControllerResource<CourseVideoListViewController>(identifier: "CourseVideoListViewController")
      let myStudyViewController = StoryboardViewControllerResource<MyStudyViewController>(identifier: "MyStudyViewController")
      let name = "Study"

      func addSchoolRollViewController(_: Void = ()) -> AddSchoolRollViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addSchoolRollViewController)
      }

      func classCoursesListViewController(_: Void = ()) -> ClassCoursesListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: classCoursesListViewController)
      }

      func courseVideoDetailViewController(_: Void = ()) -> CourseVideoDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: courseVideoDetailViewController)
      }

      func courseVideoListViewController(_: Void = ()) -> CourseVideoListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: courseVideoListViewController)
      }

      func myStudyViewController(_: Void = ()) -> MyStudyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myStudyViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.study().addSchoolRollViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addSchoolRollViewController' could not be loaded from storyboard 'Study' as 'AddSchoolRollViewController'.") }
        if _R.storyboard.study().classCoursesListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'classCoursesListViewController' could not be loaded from storyboard 'Study' as 'ClassCoursesListViewController'.") }
        if _R.storyboard.study().courseVideoDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'courseVideoDetailViewController' could not be loaded from storyboard 'Study' as 'CourseVideoDetailViewController'.") }
        if _R.storyboard.study().courseVideoListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'courseVideoListViewController' could not be loaded from storyboard 'Study' as 'CourseVideoListViewController'.") }
        if _R.storyboard.study().myStudyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myStudyViewController' could not be loaded from storyboard 'Study' as 'MyStudyViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct videoPlayer: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AliPlayerViewController

      let aliPlayerViewController = StoryboardViewControllerResource<AliPlayerViewController>(identifier: "AliPlayerViewController")
      let bundle = R.hostingBundle
      let name = "VideoPlayer"
      let videoPlayerViewController = StoryboardViewControllerResource<VideoPlayerViewController>(identifier: "VideoPlayerViewController")

      func aliPlayerViewController(_: Void = ()) -> AliPlayerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aliPlayerViewController)
      }

      func videoPlayerViewController(_: Void = ()) -> VideoPlayerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: videoPlayerViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.videoPlayer().aliPlayerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aliPlayerViewController' could not be loaded from storyboard 'VideoPlayer' as 'AliPlayerViewController'.") }
        if _R.storyboard.videoPlayer().videoPlayerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'videoPlayerViewController' could not be loaded from storyboard 'VideoPlayer' as 'VideoPlayerViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
